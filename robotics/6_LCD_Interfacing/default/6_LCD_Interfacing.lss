
6_LCD_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000174a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000174a  000017de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800096  00800096  00001814  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000029c  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002189  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010b9  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014cc  00000000  00000000  00004e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00006320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00006580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00007162  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 04 	call	0x838	; 0x838 <main>
      8a:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_port_config>:
//	Description 						: This function will configure LCD ports of micro controller
//
// ==============================================================================================================================

void lcd_port_config (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
 DDRC = 0xF7; 															// all the LCD pin's direction set as output
      9a:	e4 e3       	ldi	r30, 0x34	; 52
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	87 ef       	ldi	r24, 0xF7	; 247
      a0:	80 83       	st	Z, r24
}
      a2:	cf 91       	pop	r28
      a4:	df 91       	pop	r29
      a6:	08 95       	ret

000000a8 <port_init>:
//	Description 						: Function to Initialize PORTs
//
// ==============================================================================================================================

void port_init()
{
      a8:	df 93       	push	r29
      aa:	cf 93       	push	r28
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
      b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_port_config>
}
      b4:	cf 91       	pop	r28
      b6:	df 91       	pop	r29
      b8:	08 95       	ret

000000ba <init_devices>:
//	Description 						: Function to Initialize devices
//
// ==============================================================================================================================

void init_devices (void)
{
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
 cli(); 																// Clears the global interrupts
      c2:	f8 94       	cli
 port_init();
      c4:	0e 94 54 00 	call	0xa8	; 0xa8 <port_init>
 sei();   																// Enables the global interrupts
      c8:	78 94       	sei
}		
      ca:	cf 91       	pop	r28
      cc:	df 91       	pop	r29
      ce:	08 95       	ret

000000d0 <Busy_wait>:
//	Description 						: This function checks busy flag of LCD and returns zero on success (PORTD7 busy flag pin)
//
// ==============================================================================================================================

unsigned char Busy_wait()
{
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	0f 92       	push	r0
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp = 0;
      da:	19 82       	std	Y+1, r1	; 0x01
	EN_LW();
      dc:	a5 e3       	ldi	r26, 0x35	; 53
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	e5 e3       	ldi	r30, 0x35	; 53
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	8b 7f       	andi	r24, 0xFB	; 251
      e8:	8c 93       	st	X, r24
	COMMAND_PORT();
      ea:	a5 e3       	ldi	r26, 0x35	; 53
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	e5 e3       	ldi	r30, 0x35	; 53
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	8e 7f       	andi	r24, 0xFE	; 254
      f6:	8c 93       	st	X, r24
	READ_DATA();
      f8:	a5 e3       	ldi	r26, 0x35	; 53
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e5 e3       	ldi	r30, 0x35	; 53
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	82 60       	ori	r24, 0x02	; 2
     104:	8c 93       	st	X, r24

	PORTC &= 0x0F;
     106:	a5 e3       	ldi	r26, 0x35	; 53
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e5 e3       	ldi	r30, 0x35	; 53
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8f 70       	andi	r24, 0x0F	; 15
     112:	8c 93       	st	X, r24
	DDRC &= 0x0F;
     114:	a4 e3       	ldi	r26, 0x34	; 52
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	e4 e3       	ldi	r30, 0x34	; 52
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	8f 70       	andi	r24, 0x0F	; 15
     120:	8c 93       	st	X, r24
	PORTC |= 0x00;
     122:	a5 e3       	ldi	r26, 0x35	; 53
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e5 e3       	ldi	r30, 0x35	; 53
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	8c 93       	st	X, r24
	
	do{
		EN_HI();
     12e:	a5 e3       	ldi	r26, 0x35	; 53
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e5 e3       	ldi	r30, 0x35	; 53
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	8c 93       	st	X, r24
		EN_LW();
     13c:	a5 e3       	ldi	r26, 0x35	; 53
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	e5 e3       	ldi	r30, 0x35	; 53
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8b 7f       	andi	r24, 0xFB	; 251
     148:	8c 93       	st	X, r24
		EN_HI();
     14a:	a5 e3       	ldi	r26, 0x35	; 53
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	e5 e3       	ldi	r30, 0x35	; 53
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	84 60       	ori	r24, 0x04	; 4
     156:	8c 93       	st	X, r24
		EN_LW();
     158:	a5 e3       	ldi	r26, 0x35	; 53
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e5 e3       	ldi	r30, 0x35	; 53
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	8b 7f       	andi	r24, 0xFB	; 251
     164:	8c 93       	st	X, r24
		temp = PORTC;
     166:	e5 e3       	ldi	r30, 0x35	; 53
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	89 83       	std	Y+1, r24	; 0x01
	} 
	while((temp & 0x80) == 0x80);											// wait till PORTD7 is high
     16e:	89 81       	ldd	r24, Y+1	; 0x01
     170:	88 23       	and	r24, r24
     172:	ec f2       	brlt	.-70     	; 0x12e <Busy_wait+0x5e>
	
	EN_LW();
     174:	a5 e3       	ldi	r26, 0x35	; 53
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	e5 e3       	ldi	r30, 0x35	; 53
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	80 81       	ld	r24, Z
     17e:	8b 7f       	andi	r24, 0xFB	; 251
     180:	8c 93       	st	X, r24
	WRITE_DATA();
     182:	a5 e3       	ldi	r26, 0x35	; 53
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e5 e3       	ldi	r30, 0x35	; 53
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	8d 7f       	andi	r24, 0xFD	; 253
     18e:	8c 93       	st	X, r24
	DDRC &= 0x08;
     190:	a4 e3       	ldi	r26, 0x34	; 52
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e4 e3       	ldi	r30, 0x34	; 52
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	88 70       	andi	r24, 0x08	; 8
     19c:	8c 93       	st	X, r24
	DDRC |= 0xF7;
     19e:	a4 e3       	ldi	r26, 0x34	; 52
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e4 e3       	ldi	r30, 0x34	; 52
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	87 6f       	ori	r24, 0xF7	; 247
     1aa:	8c 93       	st	X, r24
	return 0; 
     1ac:	80 e0       	ldi	r24, 0x00	; 0
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <lcd_wr_command>:
//	Description 						: function to send command to LCD
//
// ==============================================================================================================================

void lcd_wr_command(unsigned char data)
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	60 97       	sbiw	r28, 0x10	; 16
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	88 8b       	std	Y+16, r24	; 0x10
	unsigned char temp = 0;
     1cc:	1f 86       	std	Y+15, r1	; 0x0f
	EN_LW();
     1ce:	a5 e3       	ldi	r26, 0x35	; 53
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e5 e3       	ldi	r30, 0x35	; 53
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8b 7f       	andi	r24, 0xFB	; 251
     1da:	8c 93       	st	X, r24
	COMMAND_PORT();
     1dc:	a5 e3       	ldi	r26, 0x35	; 53
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e5 e3       	ldi	r30, 0x35	; 53
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8e 7f       	andi	r24, 0xFE	; 254
     1e8:	8c 93       	st	X, r24
	WRITE_DATA();
     1ea:	a5 e3       	ldi	r26, 0x35	; 53
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e5 e3       	ldi	r30, 0x35	; 53
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8d 7f       	andi	r24, 0xFD	; 253
     1f6:	8c 93       	st	X, r24
	
	temp = data;
     1f8:	88 89       	ldd	r24, Y+16	; 0x10
     1fa:	8f 87       	std	Y+15, r24	; 0x0f
	PORTC &= 0x0F;
     1fc:	a5 e3       	ldi	r26, 0x35	; 53
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e5 e3       	ldi	r30, 0x35	; 53
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	8f 70       	andi	r24, 0x0F	; 15
     208:	8c 93       	st	X, r24
	PORTC |= (temp & 0xF0);
     20a:	a5 e3       	ldi	r26, 0x35	; 53
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e5 e3       	ldi	r30, 0x35	; 53
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	98 2f       	mov	r25, r24
     216:	8f 85       	ldd	r24, Y+15	; 0x0f
     218:	80 7f       	andi	r24, 0xF0	; 240
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
	
	EN_HI();
     21e:	a5 e3       	ldi	r26, 0x35	; 53
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	e5 e3       	ldi	r30, 0x35	; 53
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	84 60       	ori	r24, 0x04	; 4
     22a:	8c 93       	st	X, r24
	EN_LW();
     22c:	a5 e3       	ldi	r26, 0x35	; 53
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	e5 e3       	ldi	r30, 0x35	; 53
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8b 7f       	andi	r24, 0xFB	; 251
     238:	8c 93       	st	X, r24
	
	temp = data & 0x0F;
     23a:	88 89       	ldd	r24, Y+16	; 0x10
     23c:	8f 70       	andi	r24, 0x0F	; 15
     23e:	8f 87       	std	Y+15, r24	; 0x0f
	PORTC &= 0x0F;
     240:	a5 e3       	ldi	r26, 0x35	; 53
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e5 e3       	ldi	r30, 0x35	; 53
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 70       	andi	r24, 0x0F	; 15
     24c:	8c 93       	st	X, r24
	PORTC |= (temp) << 4; 
     24e:	a5 e3       	ldi	r26, 0x35	; 53
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e5 e3       	ldi	r30, 0x35	; 53
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	28 2f       	mov	r18, r24
     25a:	8f 85       	ldd	r24, Y+15	; 0x0f
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	82 95       	swap	r24
     262:	92 95       	swap	r25
     264:	90 7f       	andi	r25, 0xF0	; 240
     266:	98 27       	eor	r25, r24
     268:	80 7f       	andi	r24, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	82 2b       	or	r24, r18
     26e:	8c 93       	st	X, r24
	
	EN_HI();
     270:	a5 e3       	ldi	r26, 0x35	; 53
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e5 e3       	ldi	r30, 0x35	; 53
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	84 60       	ori	r24, 0x04	; 4
     27c:	8c 93       	st	X, r24
	EN_LW();
     27e:	a5 e3       	ldi	r26, 0x35	; 53
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e5 e3       	ldi	r30, 0x35	; 53
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8b 7f       	andi	r24, 0xFB	; 251
     28a:	8c 93       	st	X, r24

	while(Busy_wait());
     28c:	0e 94 68 00 	call	0xd0	; 0xd0 <Busy_wait>
     290:	88 23       	and	r24, r24
     292:	e1 f7       	brne	.-8      	; 0x28c <lcd_wr_command+0xd6>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 ea       	ldi	r26, 0xA0	; 160
     29a:	b0 e4       	ldi	r27, 0x40	; 64
     29c:	8b 87       	std	Y+11, r24	; 0x0b
     29e:	9c 87       	std	Y+12, r25	; 0x0c
     2a0:	ad 87       	std	Y+13, r26	; 0x0d
     2a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     2a6:	7c 85       	ldd	r23, Y+12	; 0x0c
     2a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     2ac:	26 e6       	ldi	r18, 0x66	; 102
     2ae:	36 e6       	ldi	r19, 0x66	; 102
     2b0:	46 ee       	ldi	r20, 0xE6	; 230
     2b2:	54 e4       	ldi	r21, 0x44	; 68
     2b4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	8f 83       	std	Y+7, r24	; 0x07
     2be:	98 87       	std	Y+8, r25	; 0x08
     2c0:	a9 87       	std	Y+9, r26	; 0x09
     2c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     2c4:	6f 81       	ldd	r22, Y+7	; 0x07
     2c6:	78 85       	ldd	r23, Y+8	; 0x08
     2c8:	89 85       	ldd	r24, Y+9	; 0x09
     2ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 01 09 	call	0x1202	; 0x1202 <__ltsf2>
     2d8:	88 23       	and	r24, r24
     2da:	2c f4       	brge	.+10     	; 0x2e6 <lcd_wr_command+0x130>
		__ticks = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	9e 83       	std	Y+6, r25	; 0x06
     2e2:	8d 83       	std	Y+5, r24	; 0x05
     2e4:	3f c0       	rjmp	.+126    	; 0x364 <lcd_wr_command+0x1ae>
	else if (__tmp > 65535)
     2e6:	6f 81       	ldd	r22, Y+7	; 0x07
     2e8:	78 85       	ldd	r23, Y+8	; 0x08
     2ea:	89 85       	ldd	r24, Y+9	; 0x09
     2ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	3f ef       	ldi	r19, 0xFF	; 255
     2f2:	4f e7       	ldi	r20, 0x7F	; 127
     2f4:	57 e4       	ldi	r21, 0x47	; 71
     2f6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__gtsf2>
     2fa:	18 16       	cp	r1, r24
     2fc:	4c f5       	brge	.+82     	; 0x350 <lcd_wr_command+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6b 85       	ldd	r22, Y+11	; 0x0b
     300:	7c 85       	ldd	r23, Y+12	; 0x0c
     302:	8d 85       	ldd	r24, Y+13	; 0x0d
     304:	9e 85       	ldd	r25, Y+14	; 0x0e
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	9e 83       	std	Y+6, r25	; 0x06
     324:	8d 83       	std	Y+5, r24	; 0x05
     326:	0f c0       	rjmp	.+30     	; 0x346 <lcd_wr_command+0x190>
     328:	88 eb       	ldi	r24, 0xB8	; 184
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9c 83       	std	Y+4, r25	; 0x04
     32e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_wr_command+0x17e>
     338:	9c 83       	std	Y+4, r25	; 0x04
     33a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	9e 81       	ldd	r25, Y+6	; 0x06
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	9e 83       	std	Y+6, r25	; 0x06
     344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     346:	8d 81       	ldd	r24, Y+5	; 0x05
     348:	9e 81       	ldd	r25, Y+6	; 0x06
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	69 f7       	brne	.-38     	; 0x328 <lcd_wr_command+0x172>
     34e:	14 c0       	rjmp	.+40     	; 0x378 <lcd_wr_command+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     350:	6f 81       	ldd	r22, Y+7	; 0x07
     352:	78 85       	ldd	r23, Y+8	; 0x08
     354:	89 85       	ldd	r24, Y+9	; 0x09
     356:	9a 85       	ldd	r25, Y+10	; 0x0a
     358:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	9e 83       	std	Y+6, r25	; 0x06
     362:	8d 83       	std	Y+5, r24	; 0x05
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	9e 81       	ldd	r25, Y+6	; 0x06
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <lcd_wr_command+0x1ba>
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	
}
     378:	60 96       	adiw	r28, 0x10	; 16
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <lcd_wr_char>:
//	Description 						: function to write data on LCD
//
// ==============================================================================================================================

void lcd_wr_char(unsigned char data)
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	60 97       	sbiw	r28, 0x10	; 16
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned char temp = 0;
     3a0:	1f 86       	std	Y+15, r1	; 0x0f
	EN_LW();
     3a2:	a5 e3       	ldi	r26, 0x35	; 53
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	e5 e3       	ldi	r30, 0x35	; 53
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	8c 93       	st	X, r24
	DATA_PORT();
     3b0:	a5 e3       	ldi	r26, 0x35	; 53
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	e5 e3       	ldi	r30, 0x35	; 53
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	8c 93       	st	X, r24
	WRITE_DATA();
     3be:	a5 e3       	ldi	r26, 0x35	; 53
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 e3       	ldi	r30, 0x35	; 53
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	8d 7f       	andi	r24, 0xFD	; 253
     3ca:	8c 93       	st	X, r24

	temp = data;
     3cc:	88 89       	ldd	r24, Y+16	; 0x10
     3ce:	8f 87       	std	Y+15, r24	; 0x0f
	PORTC &= 0x0F;
     3d0:	a5 e3       	ldi	r26, 0x35	; 53
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e5 e3       	ldi	r30, 0x35	; 53
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	8c 93       	st	X, r24
	PORTC |= (temp & 0xF0);
     3de:	a5 e3       	ldi	r26, 0x35	; 53
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 e3       	ldi	r30, 0x35	; 53
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	98 2f       	mov	r25, r24
     3ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ec:	80 7f       	andi	r24, 0xF0	; 240
     3ee:	89 2b       	or	r24, r25
     3f0:	8c 93       	st	X, r24

	EN_HI();
     3f2:	a5 e3       	ldi	r26, 0x35	; 53
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	e5 e3       	ldi	r30, 0x35	; 53
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	8c 93       	st	X, r24
	EN_LW();
     400:	a5 e3       	ldi	r26, 0x35	; 53
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	e5 e3       	ldi	r30, 0x35	; 53
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	8b 7f       	andi	r24, 0xFB	; 251
     40c:	8c 93       	st	X, r24
	
	temp = data & 0x0F;
     40e:	88 89       	ldd	r24, Y+16	; 0x10
     410:	8f 70       	andi	r24, 0x0F	; 15
     412:	8f 87       	std	Y+15, r24	; 0x0f
	PORTC &= 0x0F;
     414:	a5 e3       	ldi	r26, 0x35	; 53
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e5 e3       	ldi	r30, 0x35	; 53
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	8c 93       	st	X, r24
	PORTC |= (temp) << 4; 
     422:	a5 e3       	ldi	r26, 0x35	; 53
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e5 e3       	ldi	r30, 0x35	; 53
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	28 2f       	mov	r18, r24
     42e:	8f 85       	ldd	r24, Y+15	; 0x0f
     430:	88 2f       	mov	r24, r24
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	82 95       	swap	r24
     436:	92 95       	swap	r25
     438:	90 7f       	andi	r25, 0xF0	; 240
     43a:	98 27       	eor	r25, r24
     43c:	80 7f       	andi	r24, 0xF0	; 240
     43e:	98 27       	eor	r25, r24
     440:	82 2b       	or	r24, r18
     442:	8c 93       	st	X, r24
	
	EN_HI();
     444:	a5 e3       	ldi	r26, 0x35	; 53
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	e5 e3       	ldi	r30, 0x35	; 53
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	84 60       	ori	r24, 0x04	; 4
     450:	8c 93       	st	X, r24
	EN_LW();
     452:	a5 e3       	ldi	r26, 0x35	; 53
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e5 e3       	ldi	r30, 0x35	; 53
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	8c 93       	st	X, r24
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	a0 e8       	ldi	r26, 0x80	; 128
     466:	bf e3       	ldi	r27, 0x3F	; 63
     468:	8b 87       	std	Y+11, r24	; 0x0b
     46a:	9c 87       	std	Y+12, r25	; 0x0c
     46c:	ad 87       	std	Y+13, r26	; 0x0d
     46e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     470:	6b 85       	ldd	r22, Y+11	; 0x0b
     472:	7c 85       	ldd	r23, Y+12	; 0x0c
     474:	8d 85       	ldd	r24, Y+13	; 0x0d
     476:	9e 85       	ldd	r25, Y+14	; 0x0e
     478:	26 e6       	ldi	r18, 0x66	; 102
     47a:	36 e6       	ldi	r19, 0x66	; 102
     47c:	46 ee       	ldi	r20, 0xE6	; 230
     47e:	54 e4       	ldi	r21, 0x44	; 68
     480:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	8f 83       	std	Y+7, r24	; 0x07
     48a:	98 87       	std	Y+8, r25	; 0x08
     48c:	a9 87       	std	Y+9, r26	; 0x09
     48e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     490:	6f 81       	ldd	r22, Y+7	; 0x07
     492:	78 85       	ldd	r23, Y+8	; 0x08
     494:	89 85       	ldd	r24, Y+9	; 0x09
     496:	9a 85       	ldd	r25, Y+10	; 0x0a
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e8       	ldi	r20, 0x80	; 128
     49e:	5f e3       	ldi	r21, 0x3F	; 63
     4a0:	0e 94 01 09 	call	0x1202	; 0x1202 <__ltsf2>
     4a4:	88 23       	and	r24, r24
     4a6:	2c f4       	brge	.+10     	; 0x4b2 <__stack+0x53>
		__ticks = 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	9e 83       	std	Y+6, r25	; 0x06
     4ae:	8d 83       	std	Y+5, r24	; 0x05
     4b0:	3f c0       	rjmp	.+126    	; 0x530 <__stack+0xd1>
	else if (__tmp > 65535)
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	3f ef       	ldi	r19, 0xFF	; 255
     4be:	4f e7       	ldi	r20, 0x7F	; 127
     4c0:	57 e4       	ldi	r21, 0x47	; 71
     4c2:	0e 94 a1 08 	call	0x1142	; 0x1142 <__gtsf2>
     4c6:	18 16       	cp	r1, r24
     4c8:	4c f5       	brge	.+82     	; 0x51c <__stack+0xbd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ca:	6b 85       	ldd	r22, Y+11	; 0x0b
     4cc:	7c 85       	ldd	r23, Y+12	; 0x0c
     4ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e2       	ldi	r20, 0x20	; 32
     4d8:	51 e4       	ldi	r21, 0x41	; 65
     4da:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	9e 83       	std	Y+6, r25	; 0x06
     4f0:	8d 83       	std	Y+5, r24	; 0x05
     4f2:	0f c0       	rjmp	.+30     	; 0x512 <__stack+0xb3>
     4f4:	88 eb       	ldi	r24, 0xB8	; 184
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	9c 83       	std	Y+4, r25	; 0x04
     4fa:	8b 83       	std	Y+3, r24	; 0x03
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	9c 81       	ldd	r25, Y+4	; 0x04
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <__stack+0xa1>
     504:	9c 83       	std	Y+4, r25	; 0x04
     506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	9e 83       	std	Y+6, r25	; 0x06
     510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     512:	8d 81       	ldd	r24, Y+5	; 0x05
     514:	9e 81       	ldd	r25, Y+6	; 0x06
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	69 f7       	brne	.-38     	; 0x4f4 <__stack+0x95>
     51a:	14 c0       	rjmp	.+40     	; 0x544 <__stack+0xe5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     51c:	6f 81       	ldd	r22, Y+7	; 0x07
     51e:	78 85       	ldd	r23, Y+8	; 0x08
     520:	89 85       	ldd	r24, Y+9	; 0x09
     522:	9a 85       	ldd	r25, Y+10	; 0x0a
     524:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	9e 83       	std	Y+6, r25	; 0x06
     52e:	8d 83       	std	Y+5, r24	; 0x05
     530:	8d 81       	ldd	r24, Y+5	; 0x05
     532:	9e 81       	ldd	r25, Y+6	; 0x06
     534:	9a 83       	std	Y+2, r25	; 0x02
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <__stack+0xdd>
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
}
     544:	60 96       	adiw	r28, 0x10	; 16
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <lcd_init>:
//	Description 						: Function to initialise LCD
//
// ==============================================================================================================================

void lcd_init()
{
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x20);
     55e:	80 e2       	ldi	r24, 0x20	; 32
     560:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
	lcd_wr_command(0x28);
     564:	88 e2       	ldi	r24, 0x28	; 40
     566:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
	lcd_wr_command(0x0C);
     56a:	8c e0       	ldi	r24, 0x0C	; 12
     56c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
	lcd_wr_command(0x06);
     570:	86 e0       	ldi	r24, 0x06	; 6
     572:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
	lcd_wr_command(0x01);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
}
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	08 95       	ret

00000582 <lcd_cursor>:
//	Description 						: Function to set LCD cursor
//
// ==============================================================================================================================

void lcd_cursor (char row, char column)
{
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	00 d0       	rcall	.+0      	; 0x588 <lcd_cursor+0x6>
     588:	00 d0       	rcall	.+0      	; 0x58a <lcd_cursor+0x8>
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	3c 83       	std	Y+4, r19	; 0x04
     59a:	2b 83       	std	Y+3, r18	; 0x03
     59c:	8b 81       	ldd	r24, Y+3	; 0x03
     59e:	9c 81       	ldd	r25, Y+4	; 0x04
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	91 05       	cpc	r25, r1
     5a4:	d9 f0       	breq	.+54     	; 0x5dc <lcd_cursor+0x5a>
     5a6:	2b 81       	ldd	r18, Y+3	; 0x03
     5a8:	3c 81       	ldd	r19, Y+4	; 0x04
     5aa:	23 30       	cpi	r18, 0x03	; 3
     5ac:	31 05       	cpc	r19, r1
     5ae:	34 f4       	brge	.+12     	; 0x5bc <lcd_cursor+0x3a>
     5b0:	8b 81       	ldd	r24, Y+3	; 0x03
     5b2:	9c 81       	ldd	r25, Y+4	; 0x04
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	91 05       	cpc	r25, r1
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <lcd_cursor+0x50>
     5ba:	1e c0       	rjmp	.+60     	; 0x5f8 <lcd_cursor+0x76>
     5bc:	2b 81       	ldd	r18, Y+3	; 0x03
     5be:	3c 81       	ldd	r19, Y+4	; 0x04
     5c0:	23 30       	cpi	r18, 0x03	; 3
     5c2:	31 05       	cpc	r19, r1
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <lcd_cursor+0x64>
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	84 30       	cpi	r24, 0x04	; 4
     5cc:	91 05       	cpc	r25, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <lcd_cursor+0x6e>
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	81 58       	subi	r24, 0x81	; 129
     5d6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
     5da:	0e c0       	rjmp	.+28     	; 0x5f8 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	81 54       	subi	r24, 0x41	; 65
     5e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
     5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	8d 56       	subi	r24, 0x6D	; 109
     5ea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	8d 52       	subi	r24, 0x2D	; 45
     5f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
		default: break;
	}
}
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	cf 91       	pop	r28
     602:	df 91       	pop	r29
     604:	08 95       	ret

00000606 <lcd_string>:
//	Description 						: Function to send string on LCD
//
// ==============================================================================================================================

void lcd_string(char *str)
{
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	00 d0       	rcall	.+0      	; 0x60c <lcd_string+0x6>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	0a c0       	rjmp	.+20     	; 0x62a <lcd_string+0x24>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     616:	e9 81       	ldd	r30, Y+1	; 0x01
     618:	fa 81       	ldd	r31, Y+2	; 0x02
     61a:	80 81       	ld	r24, Z
     61c:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_wr_char>
		str++;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	9a 83       	std	Y+2, r25	; 0x02
     628:	89 83       	std	Y+1, r24	; 0x01
//
// ==============================================================================================================================

void lcd_string(char *str)
{
	while(*str != '\0')
     62a:	e9 81       	ldd	r30, Y+1	; 0x01
     62c:	fa 81       	ldd	r31, Y+2	; 0x02
     62e:	80 81       	ld	r24, Z
     630:	88 23       	and	r24, r24
     632:	89 f7       	brne	.-30     	; 0x616 <lcd_string+0x10>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <lcd_home>:
//	Description 						: Function to set LCD to home position
//
// ==============================================================================================================================

void lcd_home()
{
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
     646:	80 e8       	ldi	r24, 0x80	; 128
     648:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
}
     64c:	cf 91       	pop	r28
     64e:	df 91       	pop	r29
     650:	08 95       	ret

00000652 <lcd_clear>:
//	Description 						: Function to clear LCD screen
//
// ==============================================================================================================================

void lcd_clear()
{
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x01);
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_wr_command>
}
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <getPow>:
//	Description 						: Function to get power value
//
// ==============================================================================================================================

unsigned long int getPow(unsigned char value, unsigned char multiplier)
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	2b 97       	sbiw	r28, 0x0b	; 11
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	8e 83       	std	Y+6, r24	; 0x06
     67c:	6f 83       	std	Y+7, r22	; 0x07
	unsigned long int val = value;
     67e:	8e 81       	ldd	r24, Y+6	; 0x06
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	9b 83       	std	Y+3, r25	; 0x03
     68c:	ac 83       	std	Y+4, r26	; 0x04
     68e:	bd 83       	std	Y+5, r27	; 0x05
	
	if(multiplier == 0)
     690:	8f 81       	ldd	r24, Y+7	; 0x07
     692:	88 23       	and	r24, r24
     694:	89 f4       	brne	.+34     	; 0x6b8 <getPow+0x52>
	{
		return val = 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	8a 83       	std	Y+2, r24	; 0x02
     6a0:	9b 83       	std	Y+3, r25	; 0x03
     6a2:	ac 83       	std	Y+4, r26	; 0x04
     6a4:	bd 83       	std	Y+5, r27	; 0x05
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	9b 81       	ldd	r25, Y+3	; 0x03
     6aa:	ac 81       	ldd	r26, Y+4	; 0x04
     6ac:	bd 81       	ldd	r27, Y+5	; 0x05
     6ae:	88 87       	std	Y+8, r24	; 0x08
     6b0:	99 87       	std	Y+9, r25	; 0x09
     6b2:	aa 87       	std	Y+10, r26	; 0x0a
     6b4:	bb 87       	std	Y+11, r27	; 0x0b
     6b6:	25 c0       	rjmp	.+74     	; 0x702 <getPow+0x9c>
	}
	for(char i = multiplier - 1;i >= 1; i--)
     6b8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	16 c0       	rjmp	.+44     	; 0x6ec <getPow+0x86>
	{
		val = val * value;
     6c0:	8e 81       	ldd	r24, Y+6	; 0x06
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	ac 81       	ldd	r26, Y+4	; 0x04
     6d0:	bd 81       	ldd	r27, Y+5	; 0x05
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsi3>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	8a 83       	std	Y+2, r24	; 0x02
     6e0:	9b 83       	std	Y+3, r25	; 0x03
     6e2:	ac 83       	std	Y+4, r26	; 0x04
     6e4:	bd 83       	std	Y+5, r27	; 0x05
	
	if(multiplier == 0)
	{
		return val = 1;
	}
	for(char i = multiplier - 1;i >= 1; i--)
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	88 23       	and	r24, r24
     6f0:	39 f7       	brne	.-50     	; 0x6c0 <getPow+0x5a>
	{
		val = val * value;
	}
	return val;
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	9b 81       	ldd	r25, Y+3	; 0x03
     6f6:	ac 81       	ldd	r26, Y+4	; 0x04
     6f8:	bd 81       	ldd	r27, Y+5	; 0x05
     6fa:	88 87       	std	Y+8, r24	; 0x08
     6fc:	99 87       	std	Y+9, r25	; 0x09
     6fe:	aa 87       	std	Y+10, r26	; 0x0a
     700:	bb 87       	std	Y+11, r27	; 0x0b
     702:	88 85       	ldd	r24, Y+8	; 0x08
     704:	99 85       	ldd	r25, Y+9	; 0x09
     706:	aa 85       	ldd	r26, Y+10	; 0x0a
     708:	bb 85       	ldd	r27, Y+11	; 0x0b
}
     70a:	bc 01       	movw	r22, r24
     70c:	cd 01       	movw	r24, r26
     70e:	2b 96       	adiw	r28, 0x0b	; 11
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	08 95       	ret

00000720 <getDigits>:
//	Description 						: Function to extract each digit from number
//	
// ==============================================================================================================================

char getDigits(const unsigned long int number, unsigned char digit)
{
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	29 97       	sbiw	r28, 0x09	; 9
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	6d 83       	std	Y+5, r22	; 0x05
     736:	7e 83       	std	Y+6, r23	; 0x06
     738:	8f 83       	std	Y+7, r24	; 0x07
     73a:	98 87       	std	Y+8, r25	; 0x08
     73c:	49 87       	std	Y+9, r20	; 0x09
	
	unsigned long int c = 0;
     73e:	19 82       	std	Y+1, r1	; 0x01
     740:	1a 82       	std	Y+2, r1	; 0x02
     742:	1b 82       	std	Y+3, r1	; 0x03
     744:	1c 82       	std	Y+4, r1	; 0x04

	if (digit >= 0) 
    {		
		c = getPow(10,(digit - 1));
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	98 2f       	mov	r25, r24
     74a:	91 50       	subi	r25, 0x01	; 1
     74c:	8a e0       	ldi	r24, 0x0A	; 10
     74e:	69 2f       	mov	r22, r25
     750:	0e 94 33 03 	call	0x666	; 0x666 <getPow>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	ab 83       	std	Y+3, r26	; 0x03
     75e:	bc 83       	std	Y+4, r27	; 0x04
		
       return (char)((number / c) % 10) + 48;
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	af 81       	ldd	r26, Y+7	; 0x07
     766:	b8 85       	ldd	r27, Y+8	; 0x08
     768:	29 81       	ldd	r18, Y+1	; 0x01
     76a:	3a 81       	ldd	r19, Y+2	; 0x02
     76c:	4b 81       	ldd	r20, Y+3	; 0x03
     76e:	5c 81       	ldd	r21, Y+4	; 0x04
     770:	bc 01       	movw	r22, r24
     772:	cd 01       	movw	r24, r26
     774:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodsi4>
     778:	da 01       	movw	r26, r20
     77a:	c9 01       	movw	r24, r18
     77c:	2a e0       	ldi	r18, 0x0A	; 10
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	bc 01       	movw	r22, r24
     786:	cd 01       	movw	r24, r26
     788:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodsi4>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	80 5d       	subi	r24, 0xD0	; 208
    }  
    else 
    {
        return 0;
    }
}
     792:	29 96       	adiw	r28, 0x09	; 9
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <lcd_print>:
//	Description 						: Function to printf numbers on LCD
//	Note 								: User can print maximum 0 to 4294967295 numbers on LCD
// ==============================================================================================================================

void lcd_print (char row, char coloumn, unsigned long int value, int digits)
{
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	29 97       	sbiw	r28, 0x09	; 9
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	8a 83       	std	Y+2, r24	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	2c 83       	std	Y+4, r18	; 0x04
     7c2:	3d 83       	std	Y+5, r19	; 0x05
     7c4:	4e 83       	std	Y+6, r20	; 0x06
     7c6:	5f 83       	std	Y+7, r21	; 0x07
     7c8:	19 87       	std	Y+9, r17	; 0x09
     7ca:	08 87       	std	Y+8, r16	; 0x08
	unsigned char i=0;
     7cc:	19 82       	std	Y+1, r1	; 0x01
	
	if(row==0||coloumn==0)
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	88 23       	and	r24, r24
     7d2:	19 f0       	breq	.+6      	; 0x7da <lcd_print+0x36>
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	88 23       	and	r24, r24
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <lcd_print+0x3c>
	{
		lcd_home();
     7da:	0e 94 1f 03 	call	0x63e	; 0x63e <lcd_home>
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <lcd_print+0x44>
	}
	else
	{
		lcd_cursor(row,coloumn);
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	6b 81       	ldd	r22, Y+3	; 0x03
     7e4:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	}
	
	if(digits > 10)	
     7e8:	88 85       	ldd	r24, Y+8	; 0x08
     7ea:	99 85       	ldd	r25, Y+9	; 0x09
     7ec:	8b 30       	cpi	r24, 0x0B	; 11
     7ee:	91 05       	cpc	r25, r1
     7f0:	24 f0       	brlt	.+8      	; 0x7fa <lcd_print+0x56>
	{
		lcd_wr_char('X');										// Indicates digits limit has exceeded
     7f2:	88 e5       	ldi	r24, 0x58	; 88
     7f4:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_wr_char>
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <lcd_print+0x7e>
	}
	else
	{
		for(i = digits;i >= 1; i--)
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <lcd_print+0x78>
		{
			lcd_wr_char(getDigits(value,i));
     800:	8c 81       	ldd	r24, Y+4	; 0x04
     802:	9d 81       	ldd	r25, Y+5	; 0x05
     804:	ae 81       	ldd	r26, Y+6	; 0x06
     806:	bf 81       	ldd	r27, Y+7	; 0x07
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	49 81       	ldd	r20, Y+1	; 0x01
     80e:	0e 94 90 03 	call	0x720	; 0x720 <getDigits>
     812:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_wr_char>
	{
		lcd_wr_char('X');										// Indicates digits limit has exceeded
	}
	else
	{
		for(i = digits;i >= 1; i--)
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	81 50       	subi	r24, 0x01	; 1
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 23       	and	r24, r24
     820:	79 f7       	brne	.-34     	; 0x800 <lcd_print+0x5c>
		{
			lcd_wr_char(getDigits(value,i));
		}		
	}
}
     822:	29 96       	adiw	r28, 0x09	; 9
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <main>:
//	Description 						: Main function
//
// ==============================================================================================================================

int main()
{
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	aa 97       	sbiw	r28, 0x2a	; 42
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
	init_devices();
     84c:	0e 94 5d 00 	call	0xba	; 0xba <init_devices>
	
	lcd_init();
     850:	0e 94 ab 02 	call	0x556	; 0x556 <lcd_init>
	lcd_cursor(1,7);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	67 e0       	ldi	r22, 0x07	; 7
     858:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Dev");
     85c:	80 e6       	ldi	r24, 0x60	; 96
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
	lcd_cursor(2,6);
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	66 e0       	ldi	r22, 0x06	; 6
     868:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Joshi");
     86c:	84 e6       	ldi	r24, 0x64	; 100
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	aa ef       	ldi	r26, 0xFA	; 250
     87a:	b4 e4       	ldi	r27, 0x44	; 68
     87c:	8f a3       	std	Y+39, r24	; 0x27
     87e:	98 a7       	std	Y+40, r25	; 0x28
     880:	a9 a7       	std	Y+41, r26	; 0x29
     882:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     884:	6f a1       	ldd	r22, Y+39	; 0x27
     886:	78 a5       	ldd	r23, Y+40	; 0x28
     888:	89 a5       	ldd	r24, Y+41	; 0x29
     88a:	9a a5       	ldd	r25, Y+42	; 0x2a
     88c:	26 e6       	ldi	r18, 0x66	; 102
     88e:	36 e6       	ldi	r19, 0x66	; 102
     890:	46 ee       	ldi	r20, 0xE6	; 230
     892:	54 e4       	ldi	r21, 0x44	; 68
     894:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	8b a3       	std	Y+35, r24	; 0x23
     89e:	9c a3       	std	Y+36, r25	; 0x24
     8a0:	ad a3       	std	Y+37, r26	; 0x25
     8a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8a4:	6b a1       	ldd	r22, Y+35	; 0x23
     8a6:	7c a1       	ldd	r23, Y+36	; 0x24
     8a8:	8d a1       	ldd	r24, Y+37	; 0x25
     8aa:	9e a1       	ldd	r25, Y+38	; 0x26
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	5f e3       	ldi	r21, 0x3F	; 63
     8b4:	0e 94 01 09 	call	0x1202	; 0x1202 <__ltsf2>
     8b8:	88 23       	and	r24, r24
     8ba:	2c f4       	brge	.+10     	; 0x8c6 <main+0x8e>
		__ticks = 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	9a a3       	std	Y+34, r25	; 0x22
     8c2:	89 a3       	std	Y+33, r24	; 0x21
     8c4:	3f c0       	rjmp	.+126    	; 0x944 <main+0x10c>
	else if (__tmp > 65535)
     8c6:	6b a1       	ldd	r22, Y+35	; 0x23
     8c8:	7c a1       	ldd	r23, Y+36	; 0x24
     8ca:	8d a1       	ldd	r24, Y+37	; 0x25
     8cc:	9e a1       	ldd	r25, Y+38	; 0x26
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	3f ef       	ldi	r19, 0xFF	; 255
     8d2:	4f e7       	ldi	r20, 0x7F	; 127
     8d4:	57 e4       	ldi	r21, 0x47	; 71
     8d6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__gtsf2>
     8da:	18 16       	cp	r1, r24
     8dc:	4c f5       	brge	.+82     	; 0x930 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8de:	6f a1       	ldd	r22, Y+39	; 0x27
     8e0:	78 a5       	ldd	r23, Y+40	; 0x28
     8e2:	89 a5       	ldd	r24, Y+41	; 0x29
     8e4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e2       	ldi	r20, 0x20	; 32
     8ec:	51 e4       	ldi	r21, 0x41	; 65
     8ee:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	bc 01       	movw	r22, r24
     8f8:	cd 01       	movw	r24, r26
     8fa:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	9a a3       	std	Y+34, r25	; 0x22
     904:	89 a3       	std	Y+33, r24	; 0x21
     906:	0f c0       	rjmp	.+30     	; 0x926 <main+0xee>
     908:	88 eb       	ldi	r24, 0xB8	; 184
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	98 a3       	std	Y+32, r25	; 0x20
     90e:	8f 8f       	std	Y+31, r24	; 0x1f
     910:	8f 8d       	ldd	r24, Y+31	; 0x1f
     912:	98 a1       	ldd	r25, Y+32	; 0x20
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <main+0xdc>
     918:	98 a3       	std	Y+32, r25	; 0x20
     91a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91c:	89 a1       	ldd	r24, Y+33	; 0x21
     91e:	9a a1       	ldd	r25, Y+34	; 0x22
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	9a a3       	std	Y+34, r25	; 0x22
     924:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     926:	89 a1       	ldd	r24, Y+33	; 0x21
     928:	9a a1       	ldd	r25, Y+34	; 0x22
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	69 f7       	brne	.-38     	; 0x908 <main+0xd0>
     92e:	14 c0       	rjmp	.+40     	; 0x958 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     930:	6b a1       	ldd	r22, Y+35	; 0x23
     932:	7c a1       	ldd	r23, Y+36	; 0x24
     934:	8d a1       	ldd	r24, Y+37	; 0x25
     936:	9e a1       	ldd	r25, Y+38	; 0x26
     938:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	9a a3       	std	Y+34, r25	; 0x22
     942:	89 a3       	std	Y+33, r24	; 0x21
     944:	89 a1       	ldd	r24, Y+33	; 0x21
     946:	9a a1       	ldd	r25, Y+34	; 0x22
     948:	9e 8f       	std	Y+30, r25	; 0x1e
     94a:	8d 8f       	std	Y+29, r24	; 0x1d
     94c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     94e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <main+0x118>
     954:	9e 8f       	std	Y+30, r25	; 0x1e
     956:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	lcd_clear();
     958:	0e 94 29 03 	call	0x652	; 0x652 <lcd_clear>

	lcd_cursor(1,6);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	66 e0       	ldi	r22, 0x06	; 6
     960:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Vidhi");
     964:	8a e6       	ldi	r24, 0x6A	; 106
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
	lcd_cursor(2,6);
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	66 e0       	ldi	r22, 0x06	; 6
     970:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Modi");
     974:	80 e7       	ldi	r24, 0x70	; 112
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	aa ef       	ldi	r26, 0xFA	; 250
     982:	b4 e4       	ldi	r27, 0x44	; 68
     984:	89 8f       	std	Y+25, r24	; 0x19
     986:	9a 8f       	std	Y+26, r25	; 0x1a
     988:	ab 8f       	std	Y+27, r26	; 0x1b
     98a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     98c:	69 8d       	ldd	r22, Y+25	; 0x19
     98e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     990:	8b 8d       	ldd	r24, Y+27	; 0x1b
     992:	9c 8d       	ldd	r25, Y+28	; 0x1c
     994:	26 e6       	ldi	r18, 0x66	; 102
     996:	36 e6       	ldi	r19, 0x66	; 102
     998:	46 ee       	ldi	r20, 0xE6	; 230
     99a:	54 e4       	ldi	r21, 0x44	; 68
     99c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	8d 8b       	std	Y+21, r24	; 0x15
     9a6:	9e 8b       	std	Y+22, r25	; 0x16
     9a8:	af 8b       	std	Y+23, r26	; 0x17
     9aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ac:	6d 89       	ldd	r22, Y+21	; 0x15
     9ae:	7e 89       	ldd	r23, Y+22	; 0x16
     9b0:	8f 89       	ldd	r24, Y+23	; 0x17
     9b2:	98 8d       	ldd	r25, Y+24	; 0x18
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e8       	ldi	r20, 0x80	; 128
     9ba:	5f e3       	ldi	r21, 0x3F	; 63
     9bc:	0e 94 01 09 	call	0x1202	; 0x1202 <__ltsf2>
     9c0:	88 23       	and	r24, r24
     9c2:	2c f4       	brge	.+10     	; 0x9ce <main+0x196>
		__ticks = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	9c 8b       	std	Y+20, r25	; 0x14
     9ca:	8b 8b       	std	Y+19, r24	; 0x13
     9cc:	3f c0       	rjmp	.+126    	; 0xa4c <main+0x214>
	else if (__tmp > 65535)
     9ce:	6d 89       	ldd	r22, Y+21	; 0x15
     9d0:	7e 89       	ldd	r23, Y+22	; 0x16
     9d2:	8f 89       	ldd	r24, Y+23	; 0x17
     9d4:	98 8d       	ldd	r25, Y+24	; 0x18
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	3f ef       	ldi	r19, 0xFF	; 255
     9da:	4f e7       	ldi	r20, 0x7F	; 127
     9dc:	57 e4       	ldi	r21, 0x47	; 71
     9de:	0e 94 a1 08 	call	0x1142	; 0x1142 <__gtsf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	4c f5       	brge	.+82     	; 0xa38 <main+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e6:	69 8d       	ldd	r22, Y+25	; 0x19
     9e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e2       	ldi	r20, 0x20	; 32
     9f4:	51 e4       	ldi	r21, 0x41	; 65
     9f6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9c 8b       	std	Y+20, r25	; 0x14
     a0c:	8b 8b       	std	Y+19, r24	; 0x13
     a0e:	0f c0       	rjmp	.+30     	; 0xa2e <main+0x1f6>
     a10:	88 eb       	ldi	r24, 0xB8	; 184
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9a 8b       	std	Y+18, r25	; 0x12
     a16:	89 8b       	std	Y+17, r24	; 0x11
     a18:	89 89       	ldd	r24, Y+17	; 0x11
     a1a:	9a 89       	ldd	r25, Y+18	; 0x12
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <main+0x1e4>
     a20:	9a 8b       	std	Y+18, r25	; 0x12
     a22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a24:	8b 89       	ldd	r24, Y+19	; 0x13
     a26:	9c 89       	ldd	r25, Y+20	; 0x14
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	9c 8b       	std	Y+20, r25	; 0x14
     a2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2e:	8b 89       	ldd	r24, Y+19	; 0x13
     a30:	9c 89       	ldd	r25, Y+20	; 0x14
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	69 f7       	brne	.-38     	; 0xa10 <main+0x1d8>
     a36:	14 c0       	rjmp	.+40     	; 0xa60 <main+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a38:	6d 89       	ldd	r22, Y+21	; 0x15
     a3a:	7e 89       	ldd	r23, Y+22	; 0x16
     a3c:	8f 89       	ldd	r24, Y+23	; 0x17
     a3e:	98 8d       	ldd	r25, Y+24	; 0x18
     a40:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	9c 8b       	std	Y+20, r25	; 0x14
     a4a:	8b 8b       	std	Y+19, r24	; 0x13
     a4c:	8b 89       	ldd	r24, Y+19	; 0x13
     a4e:	9c 89       	ldd	r25, Y+20	; 0x14
     a50:	98 8b       	std	Y+16, r25	; 0x10
     a52:	8f 87       	std	Y+15, r24	; 0x0f
     a54:	8f 85       	ldd	r24, Y+15	; 0x0f
     a56:	98 89       	ldd	r25, Y+16	; 0x10
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <main+0x220>
     a5c:	98 8b       	std	Y+16, r25	; 0x10
     a5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	lcd_clear();
     a60:	0e 94 29 03 	call	0x652	; 0x652 <lcd_clear>

	lcd_cursor(1,3);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	63 e0       	ldi	r22, 0x03	; 3
     a68:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Dharmishtha");
     a6c:	85 e7       	ldi	r24, 0x75	; 117
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
	lcd_cursor(2,6);
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	66 e0       	ldi	r22, 0x06	; 6
     a78:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Gojiya");
     a7c:	81 e8       	ldi	r24, 0x81	; 129
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	aa ef       	ldi	r26, 0xFA	; 250
     a8a:	b4 e4       	ldi	r27, 0x44	; 68
     a8c:	8b 87       	std	Y+11, r24	; 0x0b
     a8e:	9c 87       	std	Y+12, r25	; 0x0c
     a90:	ad 87       	std	Y+13, r26	; 0x0d
     a92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a94:	6b 85       	ldd	r22, Y+11	; 0x0b
     a96:	7c 85       	ldd	r23, Y+12	; 0x0c
     a98:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9c:	26 e6       	ldi	r18, 0x66	; 102
     a9e:	36 e6       	ldi	r19, 0x66	; 102
     aa0:	46 ee       	ldi	r20, 0xE6	; 230
     aa2:	54 e4       	ldi	r21, 0x44	; 68
     aa4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	8f 83       	std	Y+7, r24	; 0x07
     aae:	98 87       	std	Y+8, r25	; 0x08
     ab0:	a9 87       	std	Y+9, r26	; 0x09
     ab2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ab4:	6f 81       	ldd	r22, Y+7	; 0x07
     ab6:	78 85       	ldd	r23, Y+8	; 0x08
     ab8:	89 85       	ldd	r24, Y+9	; 0x09
     aba:	9a 85       	ldd	r25, Y+10	; 0x0a
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e8       	ldi	r20, 0x80	; 128
     ac2:	5f e3       	ldi	r21, 0x3F	; 63
     ac4:	0e 94 01 09 	call	0x1202	; 0x1202 <__ltsf2>
     ac8:	88 23       	and	r24, r24
     aca:	2c f4       	brge	.+10     	; 0xad6 <main+0x29e>
		__ticks = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9e 83       	std	Y+6, r25	; 0x06
     ad2:	8d 83       	std	Y+5, r24	; 0x05
     ad4:	3f c0       	rjmp	.+126    	; 0xb54 <main+0x31c>
	else if (__tmp > 65535)
     ad6:	6f 81       	ldd	r22, Y+7	; 0x07
     ad8:	78 85       	ldd	r23, Y+8	; 0x08
     ada:	89 85       	ldd	r24, Y+9	; 0x09
     adc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	3f ef       	ldi	r19, 0xFF	; 255
     ae2:	4f e7       	ldi	r20, 0x7F	; 127
     ae4:	57 e4       	ldi	r21, 0x47	; 71
     ae6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__gtsf2>
     aea:	18 16       	cp	r1, r24
     aec:	4c f5       	brge	.+82     	; 0xb40 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aee:	6b 85       	ldd	r22, Y+11	; 0x0b
     af0:	7c 85       	ldd	r23, Y+12	; 0x0c
     af2:	8d 85       	ldd	r24, Y+13	; 0x0d
     af4:	9e 85       	ldd	r25, Y+14	; 0x0e
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e2       	ldi	r20, 0x20	; 32
     afc:	51 e4       	ldi	r21, 0x41	; 65
     afe:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	bc 01       	movw	r22, r24
     b08:	cd 01       	movw	r24, r26
     b0a:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	9e 83       	std	Y+6, r25	; 0x06
     b14:	8d 83       	std	Y+5, r24	; 0x05
     b16:	0f c0       	rjmp	.+30     	; 0xb36 <main+0x2fe>
     b18:	88 eb       	ldi	r24, 0xB8	; 184
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9c 83       	std	Y+4, r25	; 0x04
     b1e:	8b 83       	std	Y+3, r24	; 0x03
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	9c 81       	ldd	r25, Y+4	; 0x04
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <main+0x2ec>
     b28:	9c 83       	std	Y+4, r25	; 0x04
     b2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	69 f7       	brne	.-38     	; 0xb18 <main+0x2e0>
     b3e:	14 c0       	rjmp	.+40     	; 0xb68 <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b40:	6f 81       	ldd	r22, Y+7	; 0x07
     b42:	78 85       	ldd	r23, Y+8	; 0x08
     b44:	89 85       	ldd	r24, Y+9	; 0x09
     b46:	9a 85       	ldd	r25, Y+10	; 0x0a
     b48:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9e 83       	std	Y+6, r25	; 0x06
     b52:	8d 83       	std	Y+5, r24	; 0x05
     b54:	8d 81       	ldd	r24, Y+5	; 0x05
     b56:	9e 81       	ldd	r25, Y+6	; 0x06
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <main+0x328>
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	lcd_clear();
     b68:	0e 94 29 03 	call	0x652	; 0x652 <lcd_clear>

	lcd_cursor(1,7);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Dev");
     b74:	80 e6       	ldi	r24, 0x60	; 96
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
	lcd_cursor(2,7);
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	67 e0       	ldi	r22, 0x07	; 7
     b80:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_cursor>
	lcd_string("Dave");
     b84:	88 e8       	ldi	r24, 0x88	; 136
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 03 03 	call	0x606	; 0x606 <lcd_string>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0

}
     b90:	aa 96       	adiw	r28, 0x2a	; 42
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <__fixunssfsi>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	7b 01       	movw	r14, r22
     bac:	8c 01       	movw	r16, r24
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	5f e4       	ldi	r21, 0x4F	; 79
     bb6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__gesf2>
     bba:	88 23       	and	r24, r24
     bbc:	8c f0       	brlt	.+34     	; 0xbe0 <__fixunssfsi+0x3e>
     bbe:	c8 01       	movw	r24, r16
     bc0:	b7 01       	movw	r22, r14
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	5f e4       	ldi	r21, 0x4F	; 79
     bca:	0e 94 49 07 	call	0xe92	; 0xe92 <__subsf3>
     bce:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	20 50       	subi	r18, 0x00	; 0
     bd8:	30 40       	sbci	r19, 0x00	; 0
     bda:	40 40       	sbci	r20, 0x00	; 0
     bdc:	50 48       	sbci	r21, 0x80	; 128
     bde:	06 c0       	rjmp	.+12     	; 0xbec <__fixunssfsi+0x4a>
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 31 09 	call	0x1262	; 0x1262 <__fixsfsi>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	b9 01       	movw	r22, r18
     bee:	ca 01       	movw	r24, r20
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	08 95       	ret

00000bfa <_fpadd_parts>:
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e3 e0       	ldi	r30, 0x03	; 3
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__prologue_saves__>
     c06:	dc 01       	movw	r26, r24
     c08:	2b 01       	movw	r4, r22
     c0a:	fa 01       	movw	r30, r20
     c0c:	9c 91       	ld	r25, X
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	08 f4       	brcc	.+2      	; 0xc14 <_fpadd_parts+0x1a>
     c12:	39 c1       	rjmp	.+626    	; 0xe86 <_fpadd_parts+0x28c>
     c14:	eb 01       	movw	r28, r22
     c16:	88 81       	ld	r24, Y
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <_fpadd_parts+0x24>
     c1c:	33 c1       	rjmp	.+614    	; 0xe84 <_fpadd_parts+0x28a>
     c1e:	94 30       	cpi	r25, 0x04	; 4
     c20:	69 f4       	brne	.+26     	; 0xc3c <_fpadd_parts+0x42>
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	09 f0       	breq	.+2      	; 0xc28 <_fpadd_parts+0x2e>
     c26:	2f c1       	rjmp	.+606    	; 0xe86 <_fpadd_parts+0x28c>
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	9c 91       	ld	r25, X
     c2c:	11 97       	sbiw	r26, 0x01	; 1
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	98 17       	cp	r25, r24
     c32:	09 f4       	brne	.+2      	; 0xc36 <_fpadd_parts+0x3c>
     c34:	28 c1       	rjmp	.+592    	; 0xe86 <_fpadd_parts+0x28c>
     c36:	ad e8       	ldi	r26, 0x8D	; 141
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	25 c1       	rjmp	.+586    	; 0xe86 <_fpadd_parts+0x28c>
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	09 f4       	brne	.+2      	; 0xc42 <_fpadd_parts+0x48>
     c40:	21 c1       	rjmp	.+578    	; 0xe84 <_fpadd_parts+0x28a>
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	a9 f4       	brne	.+42     	; 0xc70 <_fpadd_parts+0x76>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	09 f0       	breq	.+2      	; 0xc4c <_fpadd_parts+0x52>
     c4a:	1d c1       	rjmp	.+570    	; 0xe86 <_fpadd_parts+0x28c>
     c4c:	9a 01       	movw	r18, r20
     c4e:	ad 01       	movw	r20, r26
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	ea 01       	movw	r28, r20
     c54:	09 90       	ld	r0, Y+
     c56:	ae 01       	movw	r20, r28
     c58:	e9 01       	movw	r28, r18
     c5a:	09 92       	st	Y+, r0
     c5c:	9e 01       	movw	r18, r28
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	c1 f7       	brne	.-16     	; 0xc52 <_fpadd_parts+0x58>
     c62:	e2 01       	movw	r28, r4
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	9c 91       	ld	r25, X
     c6a:	89 23       	and	r24, r25
     c6c:	81 83       	std	Z+1, r24	; 0x01
     c6e:	08 c1       	rjmp	.+528    	; 0xe80 <_fpadd_parts+0x286>
     c70:	92 30       	cpi	r25, 0x02	; 2
     c72:	09 f4       	brne	.+2      	; 0xc76 <_fpadd_parts+0x7c>
     c74:	07 c1       	rjmp	.+526    	; 0xe84 <_fpadd_parts+0x28a>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 90       	ld	r2, X+
     c7a:	3c 90       	ld	r3, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	eb 01       	movw	r28, r22
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	ad 90       	ld	r10, X+
     c88:	bd 90       	ld	r11, X+
     c8a:	cd 90       	ld	r12, X+
     c8c:	dc 90       	ld	r13, X
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	ec 80       	ldd	r14, Y+4	; 0x04
     c92:	fd 80       	ldd	r15, Y+5	; 0x05
     c94:	0e 81       	ldd	r16, Y+6	; 0x06
     c96:	1f 81       	ldd	r17, Y+7	; 0x07
     c98:	91 01       	movw	r18, r2
     c9a:	28 1b       	sub	r18, r24
     c9c:	39 0b       	sbc	r19, r25
     c9e:	b9 01       	movw	r22, r18
     ca0:	37 ff       	sbrs	r19, 7
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <_fpadd_parts+0xb2>
     ca4:	66 27       	eor	r22, r22
     ca6:	77 27       	eor	r23, r23
     ca8:	62 1b       	sub	r22, r18
     caa:	73 0b       	sbc	r23, r19
     cac:	60 32       	cpi	r22, 0x20	; 32
     cae:	71 05       	cpc	r23, r1
     cb0:	0c f0       	brlt	.+2      	; 0xcb4 <_fpadd_parts+0xba>
     cb2:	61 c0       	rjmp	.+194    	; 0xd76 <_fpadd_parts+0x17c>
     cb4:	12 16       	cp	r1, r18
     cb6:	13 06       	cpc	r1, r19
     cb8:	6c f5       	brge	.+90     	; 0xd14 <_fpadd_parts+0x11a>
     cba:	37 01       	movw	r6, r14
     cbc:	48 01       	movw	r8, r16
     cbe:	06 2e       	mov	r0, r22
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <_fpadd_parts+0xd0>
     cc2:	96 94       	lsr	r9
     cc4:	87 94       	ror	r8
     cc6:	77 94       	ror	r7
     cc8:	67 94       	ror	r6
     cca:	0a 94       	dec	r0
     ccc:	d2 f7       	brpl	.-12     	; 0xcc2 <_fpadd_parts+0xc8>
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <_fpadd_parts+0xe6>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	44 1f       	adc	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	6a 95       	dec	r22
     ce2:	d2 f7       	brpl	.-12     	; 0xcd8 <_fpadd_parts+0xde>
     ce4:	21 50       	subi	r18, 0x01	; 1
     ce6:	30 40       	sbci	r19, 0x00	; 0
     ce8:	40 40       	sbci	r20, 0x00	; 0
     cea:	50 40       	sbci	r21, 0x00	; 0
     cec:	2e 21       	and	r18, r14
     cee:	3f 21       	and	r19, r15
     cf0:	40 23       	and	r20, r16
     cf2:	51 23       	and	r21, r17
     cf4:	21 15       	cp	r18, r1
     cf6:	31 05       	cpc	r19, r1
     cf8:	41 05       	cpc	r20, r1
     cfa:	51 05       	cpc	r21, r1
     cfc:	21 f0       	breq	.+8      	; 0xd06 <_fpadd_parts+0x10c>
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	79 01       	movw	r14, r18
     d08:	8a 01       	movw	r16, r20
     d0a:	e6 28       	or	r14, r6
     d0c:	f7 28       	or	r15, r7
     d0e:	08 29       	or	r16, r8
     d10:	19 29       	or	r17, r9
     d12:	3c c0       	rjmp	.+120    	; 0xd8c <_fpadd_parts+0x192>
     d14:	23 2b       	or	r18, r19
     d16:	d1 f1       	breq	.+116    	; 0xd8c <_fpadd_parts+0x192>
     d18:	26 0e       	add	r2, r22
     d1a:	37 1e       	adc	r3, r23
     d1c:	35 01       	movw	r6, r10
     d1e:	46 01       	movw	r8, r12
     d20:	06 2e       	mov	r0, r22
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <_fpadd_parts+0x132>
     d24:	96 94       	lsr	r9
     d26:	87 94       	ror	r8
     d28:	77 94       	ror	r7
     d2a:	67 94       	ror	r6
     d2c:	0a 94       	dec	r0
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <_fpadd_parts+0x12a>
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <_fpadd_parts+0x148>
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	44 1f       	adc	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	6a 95       	dec	r22
     d44:	d2 f7       	brpl	.-12     	; 0xd3a <_fpadd_parts+0x140>
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	30 40       	sbci	r19, 0x00	; 0
     d4a:	40 40       	sbci	r20, 0x00	; 0
     d4c:	50 40       	sbci	r21, 0x00	; 0
     d4e:	2a 21       	and	r18, r10
     d50:	3b 21       	and	r19, r11
     d52:	4c 21       	and	r20, r12
     d54:	5d 21       	and	r21, r13
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	41 05       	cpc	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	21 f0       	breq	.+8      	; 0xd68 <_fpadd_parts+0x16e>
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	59 01       	movw	r10, r18
     d6a:	6a 01       	movw	r12, r20
     d6c:	a6 28       	or	r10, r6
     d6e:	b7 28       	or	r11, r7
     d70:	c8 28       	or	r12, r8
     d72:	d9 28       	or	r13, r9
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <_fpadd_parts+0x192>
     d76:	82 15       	cp	r24, r2
     d78:	93 05       	cpc	r25, r3
     d7a:	2c f0       	brlt	.+10     	; 0xd86 <_fpadd_parts+0x18c>
     d7c:	1c 01       	movw	r2, r24
     d7e:	aa 24       	eor	r10, r10
     d80:	bb 24       	eor	r11, r11
     d82:	65 01       	movw	r12, r10
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <_fpadd_parts+0x192>
     d86:	ee 24       	eor	r14, r14
     d88:	ff 24       	eor	r15, r15
     d8a:	87 01       	movw	r16, r14
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	9c 91       	ld	r25, X
     d90:	d2 01       	movw	r26, r4
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	8c 91       	ld	r24, X
     d96:	98 17       	cp	r25, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <_fpadd_parts+0x1a2>
     d9a:	45 c0       	rjmp	.+138    	; 0xe26 <_fpadd_parts+0x22c>
     d9c:	99 23       	and	r25, r25
     d9e:	39 f0       	breq	.+14     	; 0xdae <_fpadd_parts+0x1b4>
     da0:	a8 01       	movw	r20, r16
     da2:	97 01       	movw	r18, r14
     da4:	2a 19       	sub	r18, r10
     da6:	3b 09       	sbc	r19, r11
     da8:	4c 09       	sbc	r20, r12
     daa:	5d 09       	sbc	r21, r13
     dac:	06 c0       	rjmp	.+12     	; 0xdba <_fpadd_parts+0x1c0>
     dae:	a6 01       	movw	r20, r12
     db0:	95 01       	movw	r18, r10
     db2:	2e 19       	sub	r18, r14
     db4:	3f 09       	sbc	r19, r15
     db6:	40 0b       	sbc	r20, r16
     db8:	51 0b       	sbc	r21, r17
     dba:	57 fd       	sbrc	r21, 7
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <_fpadd_parts+0x1d4>
     dbe:	11 82       	std	Z+1, r1	; 0x01
     dc0:	33 82       	std	Z+3, r3	; 0x03
     dc2:	22 82       	std	Z+2, r2	; 0x02
     dc4:	24 83       	std	Z+4, r18	; 0x04
     dc6:	35 83       	std	Z+5, r19	; 0x05
     dc8:	46 83       	std	Z+6, r20	; 0x06
     dca:	57 83       	std	Z+7, r21	; 0x07
     dcc:	1d c0       	rjmp	.+58     	; 0xe08 <_fpadd_parts+0x20e>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	81 83       	std	Z+1, r24	; 0x01
     dd2:	33 82       	std	Z+3, r3	; 0x03
     dd4:	22 82       	std	Z+2, r2	; 0x02
     dd6:	88 27       	eor	r24, r24
     dd8:	99 27       	eor	r25, r25
     dda:	dc 01       	movw	r26, r24
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
     de0:	a4 0b       	sbc	r26, r20
     de2:	b5 0b       	sbc	r27, r21
     de4:	84 83       	std	Z+4, r24	; 0x04
     de6:	95 83       	std	Z+5, r25	; 0x05
     de8:	a6 83       	std	Z+6, r26	; 0x06
     dea:	b7 83       	std	Z+7, r27	; 0x07
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <_fpadd_parts+0x20e>
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	44 1f       	adc	r20, r20
     df4:	55 1f       	adc	r21, r21
     df6:	24 83       	std	Z+4, r18	; 0x04
     df8:	35 83       	std	Z+5, r19	; 0x05
     dfa:	46 83       	std	Z+6, r20	; 0x06
     dfc:	57 83       	std	Z+7, r21	; 0x07
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	93 83       	std	Z+3, r25	; 0x03
     e06:	82 83       	std	Z+2, r24	; 0x02
     e08:	24 81       	ldd	r18, Z+4	; 0x04
     e0a:	35 81       	ldd	r19, Z+5	; 0x05
     e0c:	46 81       	ldd	r20, Z+6	; 0x06
     e0e:	57 81       	ldd	r21, Z+7	; 0x07
     e10:	da 01       	movw	r26, r20
     e12:	c9 01       	movw	r24, r18
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	a1 09       	sbc	r26, r1
     e18:	b1 09       	sbc	r27, r1
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	af 4f       	sbci	r26, 0xFF	; 255
     e20:	bf 43       	sbci	r27, 0x3F	; 63
     e22:	28 f3       	brcs	.-54     	; 0xdee <_fpadd_parts+0x1f4>
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <_fpadd_parts+0x242>
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	33 82       	std	Z+3, r3	; 0x03
     e2a:	22 82       	std	Z+2, r2	; 0x02
     e2c:	ea 0c       	add	r14, r10
     e2e:	fb 1c       	adc	r15, r11
     e30:	0c 1d       	adc	r16, r12
     e32:	1d 1d       	adc	r17, r13
     e34:	e4 82       	std	Z+4, r14	; 0x04
     e36:	f5 82       	std	Z+5, r15	; 0x05
     e38:	06 83       	std	Z+6, r16	; 0x06
     e3a:	17 83       	std	Z+7, r17	; 0x07
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 83       	st	Z, r24
     e40:	24 81       	ldd	r18, Z+4	; 0x04
     e42:	35 81       	ldd	r19, Z+5	; 0x05
     e44:	46 81       	ldd	r20, Z+6	; 0x06
     e46:	57 81       	ldd	r21, Z+7	; 0x07
     e48:	57 ff       	sbrs	r21, 7
     e4a:	1a c0       	rjmp	.+52     	; 0xe80 <_fpadd_parts+0x286>
     e4c:	c9 01       	movw	r24, r18
     e4e:	aa 27       	eor	r26, r26
     e50:	97 fd       	sbrc	r25, 7
     e52:	a0 95       	com	r26
     e54:	ba 2f       	mov	r27, r26
     e56:	81 70       	andi	r24, 0x01	; 1
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	a0 70       	andi	r26, 0x00	; 0
     e5c:	b0 70       	andi	r27, 0x00	; 0
     e5e:	56 95       	lsr	r21
     e60:	47 95       	ror	r20
     e62:	37 95       	ror	r19
     e64:	27 95       	ror	r18
     e66:	82 2b       	or	r24, r18
     e68:	93 2b       	or	r25, r19
     e6a:	a4 2b       	or	r26, r20
     e6c:	b5 2b       	or	r27, r21
     e6e:	84 83       	std	Z+4, r24	; 0x04
     e70:	95 83       	std	Z+5, r25	; 0x05
     e72:	a6 83       	std	Z+6, r26	; 0x06
     e74:	b7 83       	std	Z+7, r27	; 0x07
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	93 83       	std	Z+3, r25	; 0x03
     e7e:	82 83       	std	Z+2, r24	; 0x02
     e80:	df 01       	movw	r26, r30
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <_fpadd_parts+0x28c>
     e84:	d2 01       	movw	r26, r4
     e86:	cd 01       	movw	r24, r26
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	e2 e1       	ldi	r30, 0x12	; 18
     e8e:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__epilogue_restores__>

00000e92 <__subsf3>:
     e92:	a0 e2       	ldi	r26, 0x20	; 32
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ef e4       	ldi	r30, 0x4F	; 79
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__prologue_saves__+0x18>
     e9e:	69 83       	std	Y+1, r22	; 0x01
     ea0:	7a 83       	std	Y+2, r23	; 0x02
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	3e 83       	std	Y+6, r19	; 0x06
     eaa:	4f 83       	std	Y+7, r20	; 0x07
     eac:	58 87       	std	Y+8, r21	; 0x08
     eae:	e9 e0       	ldi	r30, 0x09	; 9
     eb0:	ee 2e       	mov	r14, r30
     eb2:	f1 2c       	mov	r15, r1
     eb4:	ec 0e       	add	r14, r28
     eb6:	fd 1e       	adc	r15, r29
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	b7 01       	movw	r22, r14
     ebe:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     ec2:	8e 01       	movw	r16, r28
     ec4:	0f 5e       	subi	r16, 0xEF	; 239
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	ce 01       	movw	r24, r28
     eca:	05 96       	adiw	r24, 0x05	; 5
     ecc:	b8 01       	movw	r22, r16
     ece:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     ed2:	8a 89       	ldd	r24, Y+18	; 0x12
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	89 27       	eor	r24, r25
     ed8:	8a 8b       	std	Y+18, r24	; 0x12
     eda:	c7 01       	movw	r24, r14
     edc:	b8 01       	movw	r22, r16
     ede:	ae 01       	movw	r20, r28
     ee0:	47 5e       	subi	r20, 0xE7	; 231
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_fpadd_parts>
     ee8:	0e 94 85 09 	call	0x130a	; 0x130a <__pack_f>
     eec:	a0 96       	adiw	r28, 0x20	; 32
     eee:	e6 e0       	ldi	r30, 0x06	; 6
     ef0:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__epilogue_restores__+0x18>

00000ef4 <__addsf3>:
     ef4:	a0 e2       	ldi	r26, 0x20	; 32
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e0 e8       	ldi	r30, 0x80	; 128
     efa:	f7 e0       	ldi	r31, 0x07	; 7
     efc:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__prologue_saves__+0x18>
     f00:	69 83       	std	Y+1, r22	; 0x01
     f02:	7a 83       	std	Y+2, r23	; 0x02
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	2d 83       	std	Y+5, r18	; 0x05
     f0a:	3e 83       	std	Y+6, r19	; 0x06
     f0c:	4f 83       	std	Y+7, r20	; 0x07
     f0e:	58 87       	std	Y+8, r21	; 0x08
     f10:	f9 e0       	ldi	r31, 0x09	; 9
     f12:	ef 2e       	mov	r14, r31
     f14:	f1 2c       	mov	r15, r1
     f16:	ec 0e       	add	r14, r28
     f18:	fd 1e       	adc	r15, r29
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	b7 01       	movw	r22, r14
     f20:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     f24:	8e 01       	movw	r16, r28
     f26:	0f 5e       	subi	r16, 0xEF	; 239
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	ce 01       	movw	r24, r28
     f2c:	05 96       	adiw	r24, 0x05	; 5
     f2e:	b8 01       	movw	r22, r16
     f30:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     f34:	c7 01       	movw	r24, r14
     f36:	b8 01       	movw	r22, r16
     f38:	ae 01       	movw	r20, r28
     f3a:	47 5e       	subi	r20, 0xE7	; 231
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_fpadd_parts>
     f42:	0e 94 85 09 	call	0x130a	; 0x130a <__pack_f>
     f46:	a0 96       	adiw	r28, 0x20	; 32
     f48:	e6 e0       	ldi	r30, 0x06	; 6
     f4a:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__epilogue_restores__+0x18>

00000f4e <__mulsf3>:
     f4e:	a0 e2       	ldi	r26, 0x20	; 32
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ed ea       	ldi	r30, 0xAD	; 173
     f54:	f7 e0       	ldi	r31, 0x07	; 7
     f56:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__prologue_saves__>
     f5a:	69 83       	std	Y+1, r22	; 0x01
     f5c:	7a 83       	std	Y+2, r23	; 0x02
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	2d 83       	std	Y+5, r18	; 0x05
     f64:	3e 83       	std	Y+6, r19	; 0x06
     f66:	4f 83       	std	Y+7, r20	; 0x07
     f68:	58 87       	std	Y+8, r21	; 0x08
     f6a:	ce 01       	movw	r24, r28
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	be 01       	movw	r22, r28
     f70:	67 5f       	subi	r22, 0xF7	; 247
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     f78:	ce 01       	movw	r24, r28
     f7a:	05 96       	adiw	r24, 0x05	; 5
     f7c:	be 01       	movw	r22, r28
     f7e:	6f 5e       	subi	r22, 0xEF	; 239
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
     f86:	99 85       	ldd	r25, Y+9	; 0x09
     f88:	92 30       	cpi	r25, 0x02	; 2
     f8a:	88 f0       	brcs	.+34     	; 0xfae <__mulsf3+0x60>
     f8c:	89 89       	ldd	r24, Y+17	; 0x11
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	c8 f0       	brcs	.+50     	; 0xfc4 <__mulsf3+0x76>
     f92:	94 30       	cpi	r25, 0x04	; 4
     f94:	19 f4       	brne	.+6      	; 0xf9c <__mulsf3+0x4e>
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	51 f4       	brne	.+20     	; 0xfae <__mulsf3+0x60>
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__mulsf3+0x56>
     f9c:	84 30       	cpi	r24, 0x04	; 4
     f9e:	29 f4       	brne	.+10     	; 0xfaa <__mulsf3+0x5c>
     fa0:	92 30       	cpi	r25, 0x02	; 2
     fa2:	81 f4       	brne	.+32     	; 0xfc4 <__mulsf3+0x76>
     fa4:	8d e8       	ldi	r24, 0x8D	; 141
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	c6 c0       	rjmp	.+396    	; 0x1136 <__mulsf3+0x1e8>
     faa:	92 30       	cpi	r25, 0x02	; 2
     fac:	49 f4       	brne	.+18     	; 0xfc0 <__mulsf3+0x72>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	8a 89       	ldd	r24, Y+18	; 0x12
     fb4:	98 13       	cpse	r25, r24
     fb6:	21 e0       	ldi	r18, 0x01	; 1
     fb8:	2a 87       	std	Y+10, r18	; 0x0a
     fba:	ce 01       	movw	r24, r28
     fbc:	09 96       	adiw	r24, 0x09	; 9
     fbe:	bb c0       	rjmp	.+374    	; 0x1136 <__mulsf3+0x1e8>
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <__mulsf3+0x88>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	8a 89       	ldd	r24, Y+18	; 0x12
     fca:	98 13       	cpse	r25, r24
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	2a 8b       	std	Y+18, r18	; 0x12
     fd0:	ce 01       	movw	r24, r28
     fd2:	41 96       	adiw	r24, 0x11	; 17
     fd4:	b0 c0       	rjmp	.+352    	; 0x1136 <__mulsf3+0x1e8>
     fd6:	2d 84       	ldd	r2, Y+13	; 0x0d
     fd8:	3e 84       	ldd	r3, Y+14	; 0x0e
     fda:	4f 84       	ldd	r4, Y+15	; 0x0f
     fdc:	58 88       	ldd	r5, Y+16	; 0x10
     fde:	6d 88       	ldd	r6, Y+21	; 0x15
     fe0:	7e 88       	ldd	r7, Y+22	; 0x16
     fe2:	8f 88       	ldd	r8, Y+23	; 0x17
     fe4:	98 8c       	ldd	r9, Y+24	; 0x18
     fe6:	ee 24       	eor	r14, r14
     fe8:	ff 24       	eor	r15, r15
     fea:	87 01       	movw	r16, r14
     fec:	aa 24       	eor	r10, r10
     fee:	bb 24       	eor	r11, r11
     ff0:	65 01       	movw	r12, r10
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	e0 e0       	ldi	r30, 0x00	; 0
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	c1 01       	movw	r24, r2
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	89 2b       	or	r24, r25
    1006:	e9 f0       	breq	.+58     	; 0x1042 <__mulsf3+0xf4>
    1008:	e6 0c       	add	r14, r6
    100a:	f7 1c       	adc	r15, r7
    100c:	08 1d       	adc	r16, r8
    100e:	19 1d       	adc	r17, r9
    1010:	9a 01       	movw	r18, r20
    1012:	ab 01       	movw	r20, r22
    1014:	2a 0d       	add	r18, r10
    1016:	3b 1d       	adc	r19, r11
    1018:	4c 1d       	adc	r20, r12
    101a:	5d 1d       	adc	r21, r13
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 14       	cp	r14, r6
    1026:	f7 04       	cpc	r15, r7
    1028:	08 05       	cpc	r16, r8
    102a:	19 05       	cpc	r17, r9
    102c:	20 f4       	brcc	.+8      	; 0x1036 <__mulsf3+0xe8>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ba 01       	movw	r22, r20
    1038:	a9 01       	movw	r20, r18
    103a:	48 0f       	add	r20, r24
    103c:	59 1f       	adc	r21, r25
    103e:	6a 1f       	adc	r22, r26
    1040:	7b 1f       	adc	r23, r27
    1042:	aa 0c       	add	r10, r10
    1044:	bb 1c       	adc	r11, r11
    1046:	cc 1c       	adc	r12, r12
    1048:	dd 1c       	adc	r13, r13
    104a:	97 fe       	sbrs	r9, 7
    104c:	08 c0       	rjmp	.+16     	; 0x105e <__mulsf3+0x110>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	a8 2a       	or	r10, r24
    1058:	b9 2a       	or	r11, r25
    105a:	ca 2a       	or	r12, r26
    105c:	db 2a       	or	r13, r27
    105e:	31 96       	adiw	r30, 0x01	; 1
    1060:	e0 32       	cpi	r30, 0x20	; 32
    1062:	f1 05       	cpc	r31, r1
    1064:	49 f0       	breq	.+18     	; 0x1078 <__mulsf3+0x12a>
    1066:	66 0c       	add	r6, r6
    1068:	77 1c       	adc	r7, r7
    106a:	88 1c       	adc	r8, r8
    106c:	99 1c       	adc	r9, r9
    106e:	56 94       	lsr	r5
    1070:	47 94       	ror	r4
    1072:	37 94       	ror	r3
    1074:	27 94       	ror	r2
    1076:	c3 cf       	rjmp	.-122    	; 0xffe <__mulsf3+0xb0>
    1078:	fa 85       	ldd	r31, Y+10	; 0x0a
    107a:	ea 89       	ldd	r30, Y+18	; 0x12
    107c:	2b 89       	ldd	r18, Y+19	; 0x13
    107e:	3c 89       	ldd	r19, Y+20	; 0x14
    1080:	8b 85       	ldd	r24, Y+11	; 0x0b
    1082:	9c 85       	ldd	r25, Y+12	; 0x0c
    1084:	28 0f       	add	r18, r24
    1086:	39 1f       	adc	r19, r25
    1088:	2e 5f       	subi	r18, 0xFE	; 254
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	17 c0       	rjmp	.+46     	; 0x10bc <__mulsf3+0x16e>
    108e:	ca 01       	movw	r24, r20
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	89 2b       	or	r24, r25
    1096:	61 f0       	breq	.+24     	; 0x10b0 <__mulsf3+0x162>
    1098:	16 95       	lsr	r17
    109a:	07 95       	ror	r16
    109c:	f7 94       	ror	r15
    109e:	e7 94       	ror	r14
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e0       	ldi	r26, 0x00	; 0
    10a6:	b0 e8       	ldi	r27, 0x80	; 128
    10a8:	e8 2a       	or	r14, r24
    10aa:	f9 2a       	or	r15, r25
    10ac:	0a 2b       	or	r16, r26
    10ae:	1b 2b       	or	r17, r27
    10b0:	76 95       	lsr	r23
    10b2:	67 95       	ror	r22
    10b4:	57 95       	ror	r21
    10b6:	47 95       	ror	r20
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	77 fd       	sbrc	r23, 7
    10be:	e7 cf       	rjmp	.-50     	; 0x108e <__mulsf3+0x140>
    10c0:	0c c0       	rjmp	.+24     	; 0x10da <__mulsf3+0x18c>
    10c2:	44 0f       	add	r20, r20
    10c4:	55 1f       	adc	r21, r21
    10c6:	66 1f       	adc	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	17 fd       	sbrc	r17, 7
    10cc:	41 60       	ori	r20, 0x01	; 1
    10ce:	ee 0c       	add	r14, r14
    10d0:	ff 1c       	adc	r15, r15
    10d2:	00 1f       	adc	r16, r16
    10d4:	11 1f       	adc	r17, r17
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	30 40       	sbci	r19, 0x00	; 0
    10da:	40 30       	cpi	r20, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	59 07       	cpc	r21, r25
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	69 07       	cpc	r22, r25
    10e4:	90 e4       	ldi	r25, 0x40	; 64
    10e6:	79 07       	cpc	r23, r25
    10e8:	60 f3       	brcs	.-40     	; 0x10c2 <__mulsf3+0x174>
    10ea:	2b 8f       	std	Y+27, r18	; 0x1b
    10ec:	3c 8f       	std	Y+28, r19	; 0x1c
    10ee:	db 01       	movw	r26, r22
    10f0:	ca 01       	movw	r24, r20
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	a0 70       	andi	r26, 0x00	; 0
    10f8:	b0 70       	andi	r27, 0x00	; 0
    10fa:	80 34       	cpi	r24, 0x40	; 64
    10fc:	91 05       	cpc	r25, r1
    10fe:	a1 05       	cpc	r26, r1
    1100:	b1 05       	cpc	r27, r1
    1102:	61 f4       	brne	.+24     	; 0x111c <__mulsf3+0x1ce>
    1104:	47 fd       	sbrc	r20, 7
    1106:	0a c0       	rjmp	.+20     	; 0x111c <__mulsf3+0x1ce>
    1108:	e1 14       	cp	r14, r1
    110a:	f1 04       	cpc	r15, r1
    110c:	01 05       	cpc	r16, r1
    110e:	11 05       	cpc	r17, r1
    1110:	29 f0       	breq	.+10     	; 0x111c <__mulsf3+0x1ce>
    1112:	40 5c       	subi	r20, 0xC0	; 192
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	6f 4f       	sbci	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	40 78       	andi	r20, 0x80	; 128
    111c:	1a 8e       	std	Y+26, r1	; 0x1a
    111e:	fe 17       	cp	r31, r30
    1120:	11 f0       	breq	.+4      	; 0x1126 <__mulsf3+0x1d8>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	8a 8f       	std	Y+26, r24	; 0x1a
    1126:	4d 8f       	std	Y+29, r20	; 0x1d
    1128:	5e 8f       	std	Y+30, r21	; 0x1e
    112a:	6f 8f       	std	Y+31, r22	; 0x1f
    112c:	78 a3       	std	Y+32, r23	; 0x20
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	89 8f       	std	Y+25, r24	; 0x19
    1132:	ce 01       	movw	r24, r28
    1134:	49 96       	adiw	r24, 0x19	; 25
    1136:	0e 94 85 09 	call	0x130a	; 0x130a <__pack_f>
    113a:	a0 96       	adiw	r28, 0x20	; 32
    113c:	e2 e1       	ldi	r30, 0x12	; 18
    113e:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__epilogue_restores__>

00001142 <__gtsf2>:
    1142:	a8 e1       	ldi	r26, 0x18	; 24
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e7 ea       	ldi	r30, 0xA7	; 167
    1148:	f8 e0       	ldi	r31, 0x08	; 8
    114a:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__prologue_saves__+0x18>
    114e:	69 83       	std	Y+1, r22	; 0x01
    1150:	7a 83       	std	Y+2, r23	; 0x02
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	9c 83       	std	Y+4, r25	; 0x04
    1156:	2d 83       	std	Y+5, r18	; 0x05
    1158:	3e 83       	std	Y+6, r19	; 0x06
    115a:	4f 83       	std	Y+7, r20	; 0x07
    115c:	58 87       	std	Y+8, r21	; 0x08
    115e:	89 e0       	ldi	r24, 0x09	; 9
    1160:	e8 2e       	mov	r14, r24
    1162:	f1 2c       	mov	r15, r1
    1164:	ec 0e       	add	r14, r28
    1166:	fd 1e       	adc	r15, r29
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	b7 01       	movw	r22, r14
    116e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    1172:	8e 01       	movw	r16, r28
    1174:	0f 5e       	subi	r16, 0xEF	; 239
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	ce 01       	movw	r24, r28
    117a:	05 96       	adiw	r24, 0x05	; 5
    117c:	b8 01       	movw	r22, r16
    117e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	40 f0       	brcs	.+16     	; 0x1198 <__gtsf2+0x56>
    1188:	89 89       	ldd	r24, Y+17	; 0x11
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	28 f0       	brcs	.+10     	; 0x1198 <__gtsf2+0x56>
    118e:	c7 01       	movw	r24, r14
    1190:	b8 01       	movw	r22, r16
    1192:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fpcmp_parts_f>
    1196:	01 c0       	rjmp	.+2      	; 0x119a <__gtsf2+0x58>
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	68 96       	adiw	r28, 0x18	; 24
    119c:	e6 e0       	ldi	r30, 0x06	; 6
    119e:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__epilogue_restores__+0x18>

000011a2 <__gesf2>:
    11a2:	a8 e1       	ldi	r26, 0x18	; 24
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 ed       	ldi	r30, 0xD7	; 215
    11a8:	f8 e0       	ldi	r31, 0x08	; 8
    11aa:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__prologue_saves__+0x18>
    11ae:	69 83       	std	Y+1, r22	; 0x01
    11b0:	7a 83       	std	Y+2, r23	; 0x02
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	2d 83       	std	Y+5, r18	; 0x05
    11b8:	3e 83       	std	Y+6, r19	; 0x06
    11ba:	4f 83       	std	Y+7, r20	; 0x07
    11bc:	58 87       	std	Y+8, r21	; 0x08
    11be:	89 e0       	ldi	r24, 0x09	; 9
    11c0:	e8 2e       	mov	r14, r24
    11c2:	f1 2c       	mov	r15, r1
    11c4:	ec 0e       	add	r14, r28
    11c6:	fd 1e       	adc	r15, r29
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	b7 01       	movw	r22, r14
    11ce:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    11d2:	8e 01       	movw	r16, r28
    11d4:	0f 5e       	subi	r16, 0xEF	; 239
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	ce 01       	movw	r24, r28
    11da:	05 96       	adiw	r24, 0x05	; 5
    11dc:	b8 01       	movw	r22, r16
    11de:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	40 f0       	brcs	.+16     	; 0x11f8 <__gesf2+0x56>
    11e8:	89 89       	ldd	r24, Y+17	; 0x11
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	28 f0       	brcs	.+10     	; 0x11f8 <__gesf2+0x56>
    11ee:	c7 01       	movw	r24, r14
    11f0:	b8 01       	movw	r22, r16
    11f2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fpcmp_parts_f>
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <__gesf2+0x58>
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	68 96       	adiw	r28, 0x18	; 24
    11fc:	e6 e0       	ldi	r30, 0x06	; 6
    11fe:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__epilogue_restores__+0x18>

00001202 <__ltsf2>:
    1202:	a8 e1       	ldi	r26, 0x18	; 24
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e7 e0       	ldi	r30, 0x07	; 7
    1208:	f9 e0       	ldi	r31, 0x09	; 9
    120a:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__prologue_saves__+0x18>
    120e:	69 83       	std	Y+1, r22	; 0x01
    1210:	7a 83       	std	Y+2, r23	; 0x02
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	2d 83       	std	Y+5, r18	; 0x05
    1218:	3e 83       	std	Y+6, r19	; 0x06
    121a:	4f 83       	std	Y+7, r20	; 0x07
    121c:	58 87       	std	Y+8, r21	; 0x08
    121e:	89 e0       	ldi	r24, 0x09	; 9
    1220:	e8 2e       	mov	r14, r24
    1222:	f1 2c       	mov	r15, r1
    1224:	ec 0e       	add	r14, r28
    1226:	fd 1e       	adc	r15, r29
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	b7 01       	movw	r22, r14
    122e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    1232:	8e 01       	movw	r16, r28
    1234:	0f 5e       	subi	r16, 0xEF	; 239
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	ce 01       	movw	r24, r28
    123a:	05 96       	adiw	r24, 0x05	; 5
    123c:	b8 01       	movw	r22, r16
    123e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	40 f0       	brcs	.+16     	; 0x1258 <__ltsf2+0x56>
    1248:	89 89       	ldd	r24, Y+17	; 0x11
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	28 f0       	brcs	.+10     	; 0x1258 <__ltsf2+0x56>
    124e:	c7 01       	movw	r24, r14
    1250:	b8 01       	movw	r22, r16
    1252:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fpcmp_parts_f>
    1256:	01 c0       	rjmp	.+2      	; 0x125a <__ltsf2+0x58>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	68 96       	adiw	r28, 0x18	; 24
    125c:	e6 e0       	ldi	r30, 0x06	; 6
    125e:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__epilogue_restores__+0x18>

00001262 <__fixsfsi>:
    1262:	ac e0       	ldi	r26, 0x0C	; 12
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__prologue_saves__+0x20>
    126e:	69 83       	std	Y+1, r22	; 0x01
    1270:	7a 83       	std	Y+2, r23	; 0x02
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	be 01       	movw	r22, r28
    127c:	6b 5f       	subi	r22, 0xFB	; 251
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__unpack_f>
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	61 f1       	breq	.+88     	; 0x12e2 <__fixsfsi+0x80>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	50 f1       	brcs	.+84     	; 0x12e2 <__fixsfsi+0x80>
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	21 f4       	brne	.+8      	; 0x129a <__fixsfsi+0x38>
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	88 23       	and	r24, r24
    1296:	51 f1       	breq	.+84     	; 0x12ec <__fixsfsi+0x8a>
    1298:	2e c0       	rjmp	.+92     	; 0x12f6 <__fixsfsi+0x94>
    129a:	2f 81       	ldd	r18, Y+7	; 0x07
    129c:	38 85       	ldd	r19, Y+8	; 0x08
    129e:	37 fd       	sbrc	r19, 7
    12a0:	20 c0       	rjmp	.+64     	; 0x12e2 <__fixsfsi+0x80>
    12a2:	6e 81       	ldd	r22, Y+6	; 0x06
    12a4:	2f 31       	cpi	r18, 0x1F	; 31
    12a6:	31 05       	cpc	r19, r1
    12a8:	1c f0       	brlt	.+6      	; 0x12b0 <__fixsfsi+0x4e>
    12aa:	66 23       	and	r22, r22
    12ac:	f9 f0       	breq	.+62     	; 0x12ec <__fixsfsi+0x8a>
    12ae:	23 c0       	rjmp	.+70     	; 0x12f6 <__fixsfsi+0x94>
    12b0:	8e e1       	ldi	r24, 0x1E	; 30
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	82 1b       	sub	r24, r18
    12b6:	93 0b       	sbc	r25, r19
    12b8:	29 85       	ldd	r18, Y+9	; 0x09
    12ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    12bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    12be:	5c 85       	ldd	r21, Y+12	; 0x0c
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <__fixsfsi+0x68>
    12c2:	56 95       	lsr	r21
    12c4:	47 95       	ror	r20
    12c6:	37 95       	ror	r19
    12c8:	27 95       	ror	r18
    12ca:	8a 95       	dec	r24
    12cc:	d2 f7       	brpl	.-12     	; 0x12c2 <__fixsfsi+0x60>
    12ce:	66 23       	and	r22, r22
    12d0:	b1 f0       	breq	.+44     	; 0x12fe <__fixsfsi+0x9c>
    12d2:	50 95       	com	r21
    12d4:	40 95       	com	r20
    12d6:	30 95       	com	r19
    12d8:	21 95       	neg	r18
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	4f 4f       	sbci	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <__fixsfsi+0x9c>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <__fixsfsi+0x9c>
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f ef       	ldi	r20, 0xFF	; 255
    12f2:	5f e7       	ldi	r21, 0x7F	; 127
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <__fixsfsi+0x9c>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e8       	ldi	r21, 0x80	; 128
    12fe:	b9 01       	movw	r22, r18
    1300:	ca 01       	movw	r24, r20
    1302:	2c 96       	adiw	r28, 0x0c	; 12
    1304:	e2 e0       	ldi	r30, 0x02	; 2
    1306:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__epilogue_restores__+0x20>

0000130a <__pack_f>:
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	fc 01       	movw	r30, r24
    1316:	e4 80       	ldd	r14, Z+4	; 0x04
    1318:	f5 80       	ldd	r15, Z+5	; 0x05
    131a:	06 81       	ldd	r16, Z+6	; 0x06
    131c:	17 81       	ldd	r17, Z+7	; 0x07
    131e:	d1 80       	ldd	r13, Z+1	; 0x01
    1320:	80 81       	ld	r24, Z
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	48 f4       	brcc	.+18     	; 0x1338 <__pack_f+0x2e>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e1       	ldi	r26, 0x10	; 16
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e8 2a       	or	r14, r24
    1330:	f9 2a       	or	r15, r25
    1332:	0a 2b       	or	r16, r26
    1334:	1b 2b       	or	r17, r27
    1336:	a5 c0       	rjmp	.+330    	; 0x1482 <__pack_f+0x178>
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	09 f4       	brne	.+2      	; 0x133e <__pack_f+0x34>
    133c:	9f c0       	rjmp	.+318    	; 0x147c <__pack_f+0x172>
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	21 f4       	brne	.+8      	; 0x134a <__pack_f+0x40>
    1342:	ee 24       	eor	r14, r14
    1344:	ff 24       	eor	r15, r15
    1346:	87 01       	movw	r16, r14
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <__pack_f+0x4a>
    134a:	e1 14       	cp	r14, r1
    134c:	f1 04       	cpc	r15, r1
    134e:	01 05       	cpc	r16, r1
    1350:	11 05       	cpc	r17, r1
    1352:	19 f4       	brne	.+6      	; 0x135a <__pack_f+0x50>
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	96 c0       	rjmp	.+300    	; 0x1486 <__pack_f+0x17c>
    135a:	62 81       	ldd	r22, Z+2	; 0x02
    135c:	73 81       	ldd	r23, Z+3	; 0x03
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	62 38       	cpi	r22, 0x82	; 130
    1362:	79 07       	cpc	r23, r25
    1364:	0c f0       	brlt	.+2      	; 0x1368 <__pack_f+0x5e>
    1366:	5b c0       	rjmp	.+182    	; 0x141e <__pack_f+0x114>
    1368:	22 e8       	ldi	r18, 0x82	; 130
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	26 1b       	sub	r18, r22
    136e:	37 0b       	sbc	r19, r23
    1370:	2a 31       	cpi	r18, 0x1A	; 26
    1372:	31 05       	cpc	r19, r1
    1374:	2c f0       	brlt	.+10     	; 0x1380 <__pack_f+0x76>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	2a c0       	rjmp	.+84     	; 0x13d4 <__pack_f+0xca>
    1380:	b8 01       	movw	r22, r16
    1382:	a7 01       	movw	r20, r14
    1384:	02 2e       	mov	r0, r18
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__pack_f+0x86>
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	0a 94       	dec	r0
    1392:	d2 f7       	brpl	.-12     	; 0x1388 <__pack_f+0x7e>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <__pack_f+0x9c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	aa 1f       	adc	r26, r26
    13a4:	bb 1f       	adc	r27, r27
    13a6:	2a 95       	dec	r18
    13a8:	d2 f7       	brpl	.-12     	; 0x139e <__pack_f+0x94>
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	a1 09       	sbc	r26, r1
    13ae:	b1 09       	sbc	r27, r1
    13b0:	8e 21       	and	r24, r14
    13b2:	9f 21       	and	r25, r15
    13b4:	a0 23       	and	r26, r16
    13b6:	b1 23       	and	r27, r17
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	a1 05       	cpc	r26, r1
    13bc:	b1 05       	cpc	r27, r1
    13be:	21 f0       	breq	.+8      	; 0x13c8 <__pack_f+0xbe>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a0 e0       	ldi	r26, 0x00	; 0
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	9a 01       	movw	r18, r20
    13ca:	ab 01       	movw	r20, r22
    13cc:	28 2b       	or	r18, r24
    13ce:	39 2b       	or	r19, r25
    13d0:	4a 2b       	or	r20, r26
    13d2:	5b 2b       	or	r21, r27
    13d4:	da 01       	movw	r26, r20
    13d6:	c9 01       	movw	r24, r18
    13d8:	8f 77       	andi	r24, 0x7F	; 127
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	a0 70       	andi	r26, 0x00	; 0
    13de:	b0 70       	andi	r27, 0x00	; 0
    13e0:	80 34       	cpi	r24, 0x40	; 64
    13e2:	91 05       	cpc	r25, r1
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <__pack_f+0xee>
    13ea:	27 ff       	sbrs	r18, 7
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <__pack_f+0xf6>
    13ee:	20 5c       	subi	r18, 0xC0	; 192
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	4f 4f       	sbci	r20, 0xFF	; 255
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__pack_f+0xf6>
    13f8:	21 5c       	subi	r18, 0xC1	; 193
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	e0 e0       	ldi	r30, 0x00	; 0
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	20 30       	cpi	r18, 0x00	; 0
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	3a 07       	cpc	r19, r26
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	4a 07       	cpc	r20, r26
    140e:	a0 e4       	ldi	r26, 0x40	; 64
    1410:	5a 07       	cpc	r21, r26
    1412:	10 f0       	brcs	.+4      	; 0x1418 <__pack_f+0x10e>
    1414:	e1 e0       	ldi	r30, 0x01	; 1
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	79 01       	movw	r14, r18
    141a:	8a 01       	movw	r16, r20
    141c:	27 c0       	rjmp	.+78     	; 0x146c <__pack_f+0x162>
    141e:	60 38       	cpi	r22, 0x80	; 128
    1420:	71 05       	cpc	r23, r1
    1422:	64 f5       	brge	.+88     	; 0x147c <__pack_f+0x172>
    1424:	fb 01       	movw	r30, r22
    1426:	e1 58       	subi	r30, 0x81	; 129
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	d8 01       	movw	r26, r16
    142c:	c7 01       	movw	r24, r14
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	a0 70       	andi	r26, 0x00	; 0
    1434:	b0 70       	andi	r27, 0x00	; 0
    1436:	80 34       	cpi	r24, 0x40	; 64
    1438:	91 05       	cpc	r25, r1
    143a:	a1 05       	cpc	r26, r1
    143c:	b1 05       	cpc	r27, r1
    143e:	39 f4       	brne	.+14     	; 0x144e <__pack_f+0x144>
    1440:	e7 fe       	sbrs	r14, 7
    1442:	0d c0       	rjmp	.+26     	; 0x145e <__pack_f+0x154>
    1444:	80 e4       	ldi	r24, 0x40	; 64
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <__pack_f+0x14c>
    144e:	8f e3       	ldi	r24, 0x3F	; 63
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 0e       	add	r14, r24
    1458:	f9 1e       	adc	r15, r25
    145a:	0a 1f       	adc	r16, r26
    145c:	1b 1f       	adc	r17, r27
    145e:	17 ff       	sbrs	r17, 7
    1460:	05 c0       	rjmp	.+10     	; 0x146c <__pack_f+0x162>
    1462:	16 95       	lsr	r17
    1464:	07 95       	ror	r16
    1466:	f7 94       	ror	r15
    1468:	e7 94       	ror	r14
    146a:	31 96       	adiw	r30, 0x01	; 1
    146c:	87 e0       	ldi	r24, 0x07	; 7
    146e:	16 95       	lsr	r17
    1470:	07 95       	ror	r16
    1472:	f7 94       	ror	r15
    1474:	e7 94       	ror	r14
    1476:	8a 95       	dec	r24
    1478:	d1 f7       	brne	.-12     	; 0x146e <__pack_f+0x164>
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <__pack_f+0x17c>
    147c:	ee 24       	eor	r14, r14
    147e:	ff 24       	eor	r15, r15
    1480:	87 01       	movw	r16, r14
    1482:	ef ef       	ldi	r30, 0xFF	; 255
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	6e 2f       	mov	r22, r30
    1488:	67 95       	ror	r22
    148a:	66 27       	eor	r22, r22
    148c:	67 95       	ror	r22
    148e:	90 2f       	mov	r25, r16
    1490:	9f 77       	andi	r25, 0x7F	; 127
    1492:	d7 94       	ror	r13
    1494:	dd 24       	eor	r13, r13
    1496:	d7 94       	ror	r13
    1498:	8e 2f       	mov	r24, r30
    149a:	86 95       	lsr	r24
    149c:	49 2f       	mov	r20, r25
    149e:	46 2b       	or	r20, r22
    14a0:	58 2f       	mov	r21, r24
    14a2:	5d 29       	or	r21, r13
    14a4:	b7 01       	movw	r22, r14
    14a6:	ca 01       	movw	r24, r20
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	08 95       	ret

000014b4 <__unpack_f>:
    14b4:	fc 01       	movw	r30, r24
    14b6:	db 01       	movw	r26, r22
    14b8:	40 81       	ld	r20, Z
    14ba:	51 81       	ldd	r21, Z+1	; 0x01
    14bc:	22 81       	ldd	r18, Z+2	; 0x02
    14be:	62 2f       	mov	r22, r18
    14c0:	6f 77       	andi	r22, 0x7F	; 127
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	22 1f       	adc	r18, r18
    14c6:	22 27       	eor	r18, r18
    14c8:	22 1f       	adc	r18, r18
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	89 2f       	mov	r24, r25
    14ce:	88 0f       	add	r24, r24
    14d0:	82 2b       	or	r24, r18
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	99 1f       	adc	r25, r25
    14d8:	99 27       	eor	r25, r25
    14da:	99 1f       	adc	r25, r25
    14dc:	11 96       	adiw	r26, 0x01	; 1
    14de:	9c 93       	st	X, r25
    14e0:	11 97       	sbiw	r26, 0x01	; 1
    14e2:	21 15       	cp	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	a9 f5       	brne	.+106    	; 0x1552 <__unpack_f+0x9e>
    14e8:	41 15       	cp	r20, r1
    14ea:	51 05       	cpc	r21, r1
    14ec:	61 05       	cpc	r22, r1
    14ee:	71 05       	cpc	r23, r1
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__unpack_f+0x42>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	37 c0       	rjmp	.+110    	; 0x1564 <__unpack_f+0xb0>
    14f6:	82 e8       	ldi	r24, 0x82	; 130
    14f8:	9f ef       	ldi	r25, 0xFF	; 255
    14fa:	13 96       	adiw	r26, 0x03	; 3
    14fc:	9c 93       	st	X, r25
    14fe:	8e 93       	st	-X, r24
    1500:	12 97       	sbiw	r26, 0x02	; 2
    1502:	9a 01       	movw	r18, r20
    1504:	ab 01       	movw	r20, r22
    1506:	67 e0       	ldi	r22, 0x07	; 7
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	44 1f       	adc	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	6a 95       	dec	r22
    1512:	d1 f7       	brne	.-12     	; 0x1508 <__unpack_f+0x54>
    1514:	83 e0       	ldi	r24, 0x03	; 3
    1516:	8c 93       	st	X, r24
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <__unpack_f+0x80>
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	44 1f       	adc	r20, r20
    1520:	55 1f       	adc	r21, r21
    1522:	12 96       	adiw	r26, 0x02	; 2
    1524:	8d 91       	ld	r24, X+
    1526:	9c 91       	ld	r25, X
    1528:	13 97       	sbiw	r26, 0x03	; 3
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	13 96       	adiw	r26, 0x03	; 3
    152e:	9c 93       	st	X, r25
    1530:	8e 93       	st	-X, r24
    1532:	12 97       	sbiw	r26, 0x02	; 2
    1534:	20 30       	cpi	r18, 0x00	; 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	38 07       	cpc	r19, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	48 07       	cpc	r20, r24
    153e:	80 e4       	ldi	r24, 0x40	; 64
    1540:	58 07       	cpc	r21, r24
    1542:	58 f3       	brcs	.-42     	; 0x151a <__unpack_f+0x66>
    1544:	14 96       	adiw	r26, 0x04	; 4
    1546:	2d 93       	st	X+, r18
    1548:	3d 93       	st	X+, r19
    154a:	4d 93       	st	X+, r20
    154c:	5c 93       	st	X, r21
    154e:	17 97       	sbiw	r26, 0x07	; 7
    1550:	08 95       	ret
    1552:	2f 3f       	cpi	r18, 0xFF	; 255
    1554:	31 05       	cpc	r19, r1
    1556:	79 f4       	brne	.+30     	; 0x1576 <__unpack_f+0xc2>
    1558:	41 15       	cp	r20, r1
    155a:	51 05       	cpc	r21, r1
    155c:	61 05       	cpc	r22, r1
    155e:	71 05       	cpc	r23, r1
    1560:	19 f4       	brne	.+6      	; 0x1568 <__unpack_f+0xb4>
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	8c 93       	st	X, r24
    1566:	08 95       	ret
    1568:	64 ff       	sbrs	r22, 4
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <__unpack_f+0xbe>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8c 93       	st	X, r24
    1570:	12 c0       	rjmp	.+36     	; 0x1596 <__unpack_f+0xe2>
    1572:	1c 92       	st	X, r1
    1574:	10 c0       	rjmp	.+32     	; 0x1596 <__unpack_f+0xe2>
    1576:	2f 57       	subi	r18, 0x7F	; 127
    1578:	30 40       	sbci	r19, 0x00	; 0
    157a:	13 96       	adiw	r26, 0x03	; 3
    157c:	3c 93       	st	X, r19
    157e:	2e 93       	st	-X, r18
    1580:	12 97       	sbiw	r26, 0x02	; 2
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	8c 93       	st	X, r24
    1586:	87 e0       	ldi	r24, 0x07	; 7
    1588:	44 0f       	add	r20, r20
    158a:	55 1f       	adc	r21, r21
    158c:	66 1f       	adc	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	8a 95       	dec	r24
    1592:	d1 f7       	brne	.-12     	; 0x1588 <__unpack_f+0xd4>
    1594:	70 64       	ori	r23, 0x40	; 64
    1596:	14 96       	adiw	r26, 0x04	; 4
    1598:	4d 93       	st	X+, r20
    159a:	5d 93       	st	X+, r21
    159c:	6d 93       	st	X+, r22
    159e:	7c 93       	st	X, r23
    15a0:	17 97       	sbiw	r26, 0x07	; 7
    15a2:	08 95       	ret

000015a4 <__fpcmp_parts_f>:
    15a4:	1f 93       	push	r17
    15a6:	dc 01       	movw	r26, r24
    15a8:	fb 01       	movw	r30, r22
    15aa:	9c 91       	ld	r25, X
    15ac:	92 30       	cpi	r25, 0x02	; 2
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <__fpcmp_parts_f+0xe>
    15b0:	47 c0       	rjmp	.+142    	; 0x1640 <__fpcmp_parts_f+0x9c>
    15b2:	80 81       	ld	r24, Z
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <__fpcmp_parts_f+0x16>
    15b8:	43 c0       	rjmp	.+134    	; 0x1640 <__fpcmp_parts_f+0x9c>
    15ba:	94 30       	cpi	r25, 0x04	; 4
    15bc:	51 f4       	brne	.+20     	; 0x15d2 <__fpcmp_parts_f+0x2e>
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	1c 91       	ld	r17, X
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	99 f5       	brne	.+102    	; 0x162c <__fpcmp_parts_f+0x88>
    15c6:	81 81       	ldd	r24, Z+1	; 0x01
    15c8:	68 2f       	mov	r22, r24
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	61 1b       	sub	r22, r17
    15ce:	71 09       	sbc	r23, r1
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <__fpcmp_parts_f+0xac>
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	21 f0       	breq	.+8      	; 0x15de <__fpcmp_parts_f+0x3a>
    15d6:	92 30       	cpi	r25, 0x02	; 2
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <__fpcmp_parts_f+0x42>
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	b9 f1       	breq	.+110    	; 0x164c <__fpcmp_parts_f+0xa8>
    15de:	81 81       	ldd	r24, Z+1	; 0x01
    15e0:	88 23       	and	r24, r24
    15e2:	89 f1       	breq	.+98     	; 0x1646 <__fpcmp_parts_f+0xa2>
    15e4:	2d c0       	rjmp	.+90     	; 0x1640 <__fpcmp_parts_f+0x9c>
    15e6:	11 96       	adiw	r26, 0x01	; 1
    15e8:	1c 91       	ld	r17, X
    15ea:	11 97       	sbiw	r26, 0x01	; 1
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	f1 f0       	breq	.+60     	; 0x162c <__fpcmp_parts_f+0x88>
    15f0:	81 81       	ldd	r24, Z+1	; 0x01
    15f2:	18 17       	cp	r17, r24
    15f4:	d9 f4       	brne	.+54     	; 0x162c <__fpcmp_parts_f+0x88>
    15f6:	12 96       	adiw	r26, 0x02	; 2
    15f8:	2d 91       	ld	r18, X+
    15fa:	3c 91       	ld	r19, X
    15fc:	13 97       	sbiw	r26, 0x03	; 3
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	82 17       	cp	r24, r18
    1604:	93 07       	cpc	r25, r19
    1606:	94 f0       	brlt	.+36     	; 0x162c <__fpcmp_parts_f+0x88>
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	bc f0       	brlt	.+46     	; 0x163c <__fpcmp_parts_f+0x98>
    160e:	14 96       	adiw	r26, 0x04	; 4
    1610:	8d 91       	ld	r24, X+
    1612:	9d 91       	ld	r25, X+
    1614:	0d 90       	ld	r0, X+
    1616:	bc 91       	ld	r27, X
    1618:	a0 2d       	mov	r26, r0
    161a:	24 81       	ldd	r18, Z+4	; 0x04
    161c:	35 81       	ldd	r19, Z+5	; 0x05
    161e:	46 81       	ldd	r20, Z+6	; 0x06
    1620:	57 81       	ldd	r21, Z+7	; 0x07
    1622:	28 17       	cp	r18, r24
    1624:	39 07       	cpc	r19, r25
    1626:	4a 07       	cpc	r20, r26
    1628:	5b 07       	cpc	r21, r27
    162a:	18 f4       	brcc	.+6      	; 0x1632 <__fpcmp_parts_f+0x8e>
    162c:	11 23       	and	r17, r17
    162e:	41 f0       	breq	.+16     	; 0x1640 <__fpcmp_parts_f+0x9c>
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <__fpcmp_parts_f+0xa2>
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	a4 07       	cpc	r26, r20
    1638:	b5 07       	cpc	r27, r21
    163a:	40 f4       	brcc	.+16     	; 0x164c <__fpcmp_parts_f+0xa8>
    163c:	11 23       	and	r17, r17
    163e:	19 f0       	breq	.+6      	; 0x1646 <__fpcmp_parts_f+0xa2>
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <__fpcmp_parts_f+0xac>
    1646:	6f ef       	ldi	r22, 0xFF	; 255
    1648:	7f ef       	ldi	r23, 0xFF	; 255
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <__fpcmp_parts_f+0xac>
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	cb 01       	movw	r24, r22
    1652:	1f 91       	pop	r17
    1654:	08 95       	ret

00001656 <__mulsi3>:
    1656:	62 9f       	mul	r22, r18
    1658:	d0 01       	movw	r26, r0
    165a:	73 9f       	mul	r23, r19
    165c:	f0 01       	movw	r30, r0
    165e:	82 9f       	mul	r24, r18
    1660:	e0 0d       	add	r30, r0
    1662:	f1 1d       	adc	r31, r1
    1664:	64 9f       	mul	r22, r20
    1666:	e0 0d       	add	r30, r0
    1668:	f1 1d       	adc	r31, r1
    166a:	92 9f       	mul	r25, r18
    166c:	f0 0d       	add	r31, r0
    166e:	83 9f       	mul	r24, r19
    1670:	f0 0d       	add	r31, r0
    1672:	74 9f       	mul	r23, r20
    1674:	f0 0d       	add	r31, r0
    1676:	65 9f       	mul	r22, r21
    1678:	f0 0d       	add	r31, r0
    167a:	99 27       	eor	r25, r25
    167c:	72 9f       	mul	r23, r18
    167e:	b0 0d       	add	r27, r0
    1680:	e1 1d       	adc	r30, r1
    1682:	f9 1f       	adc	r31, r25
    1684:	63 9f       	mul	r22, r19
    1686:	b0 0d       	add	r27, r0
    1688:	e1 1d       	adc	r30, r1
    168a:	f9 1f       	adc	r31, r25
    168c:	bd 01       	movw	r22, r26
    168e:	cf 01       	movw	r24, r30
    1690:	11 24       	eor	r1, r1
    1692:	08 95       	ret

00001694 <__udivmodsi4>:
    1694:	a1 e2       	ldi	r26, 0x21	; 33
    1696:	1a 2e       	mov	r1, r26
    1698:	aa 1b       	sub	r26, r26
    169a:	bb 1b       	sub	r27, r27
    169c:	fd 01       	movw	r30, r26
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <__udivmodsi4_ep>

000016a0 <__udivmodsi4_loop>:
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	ee 1f       	adc	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	a2 17       	cp	r26, r18
    16aa:	b3 07       	cpc	r27, r19
    16ac:	e4 07       	cpc	r30, r20
    16ae:	f5 07       	cpc	r31, r21
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__udivmodsi4_ep>
    16b2:	a2 1b       	sub	r26, r18
    16b4:	b3 0b       	sbc	r27, r19
    16b6:	e4 0b       	sbc	r30, r20
    16b8:	f5 0b       	sbc	r31, r21

000016ba <__udivmodsi4_ep>:
    16ba:	66 1f       	adc	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	1a 94       	dec	r1
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <__udivmodsi4_loop>
    16c6:	60 95       	com	r22
    16c8:	70 95       	com	r23
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	bd 01       	movw	r22, r26
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret

000016d8 <__prologue_saves__>:
    16d8:	2f 92       	push	r2
    16da:	3f 92       	push	r3
    16dc:	4f 92       	push	r4
    16de:	5f 92       	push	r5
    16e0:	6f 92       	push	r6
    16e2:	7f 92       	push	r7
    16e4:	8f 92       	push	r8
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	ca 1b       	sub	r28, r26
    1702:	db 0b       	sbc	r29, r27
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	09 94       	ijmp

00001710 <__epilogue_restores__>:
    1710:	2a 88       	ldd	r2, Y+18	; 0x12
    1712:	39 88       	ldd	r3, Y+17	; 0x11
    1714:	48 88       	ldd	r4, Y+16	; 0x10
    1716:	5f 84       	ldd	r5, Y+15	; 0x0f
    1718:	6e 84       	ldd	r6, Y+14	; 0x0e
    171a:	7d 84       	ldd	r7, Y+13	; 0x0d
    171c:	8c 84       	ldd	r8, Y+12	; 0x0c
    171e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1720:	aa 84       	ldd	r10, Y+10	; 0x0a
    1722:	b9 84       	ldd	r11, Y+9	; 0x09
    1724:	c8 84       	ldd	r12, Y+8	; 0x08
    1726:	df 80       	ldd	r13, Y+7	; 0x07
    1728:	ee 80       	ldd	r14, Y+6	; 0x06
    172a:	fd 80       	ldd	r15, Y+5	; 0x05
    172c:	0c 81       	ldd	r16, Y+4	; 0x04
    172e:	1b 81       	ldd	r17, Y+3	; 0x03
    1730:	aa 81       	ldd	r26, Y+2	; 0x02
    1732:	b9 81       	ldd	r27, Y+1	; 0x01
    1734:	ce 0f       	add	r28, r30
    1736:	d1 1d       	adc	r29, r1
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	ed 01       	movw	r28, r26
    1744:	08 95       	ret

00001746 <_exit>:
    1746:	f8 94       	cli

00001748 <__stop_program>:
    1748:	ff cf       	rjmp	.-2      	; 0x1748 <__stop_program>
